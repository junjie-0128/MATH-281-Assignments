(* Content-type: application/mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 7.0' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       145,          7]
NotebookDataLength[    300475,       5890]
NotebookOptionsPosition[    289957,       5620]
NotebookOutlinePosition[    290592,       5644]
CellTagsIndexPosition[    290549,       5641]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell[TextData[{
 StyleBox["Mathematica", "Title",
  FontSlant->"Italic"],
 StyleBox[" Commands I.", "Title"]
}], "Subtitle",ExpressionUUID->"74128aec-34a5-4c21-a1f4-fa939d28216c"],

Cell[TextData[{
 "This ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notebook is designed to give you a quick introduction to some of the basic \
commands for defining, using, and plotting functions. There are many sources \
for more information, including\n\t->  \
http://www.wolfram.com/broadcast/screencasts/handsonstart/  \n\t     (~1/2 \
hour video. Shows how to get started.)\n\t-> The ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " documentation can be obtained by clicking \n\t    \
\[OpenCurlyDoubleQuote]Wolfram Documentation\[CloseCurlyDoubleQuote] in the \
",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " \[OpenCurlyDoubleQuote]Help\[CloseCurlyDoubleQuote] pull-down menu.\n\t -> \
http://reference.wolfram.com/language/guide/HowToTopics.html\n\t    (Gives \
information about specific topics.) \n\t-> A longer tutorial created by Prof. \
Clark is also available on the course website.\n\t-> \
http://www.demonstrations.wolfram.com/\n\t    (Gives lots of more advanced \
demonstrations.)\n\t"
}], "Subsubsection",
 CellChangeTimes->{{3.550826862502459*^9, 3.550826960133637*^9}, {
   3.550827007918332*^9, 3.550827171128642*^9}, {3.550827217595992*^9, 
   3.550827427276907*^9}, 3.5508312557747383`*^9, {3.58498125105797*^9, 
   3.584981312361806*^9}, {3.6161891561327953`*^9, 3.6161891652110786`*^9}, {
   3.6482229480649557`*^9, 3.6482229480661907`*^9}, {3.7117912431988077`*^9, 
   3.71179127398074*^9}, {3.711791471081608*^9, 3.711791471224424*^9}, {
   3.711792170767151*^9, 3.7117922751119843`*^9}, {3.71179268013072*^9, 
   3.711792734523591*^9}},ExpressionUUID->"9a7f3a8d-38e6-405c-b4ba-\
19f6a6ae813a"],

Cell[CellGroupData[{

Cell["NOTEBOOK BASICS", "Subsection",
 CellChangeTimes->{{3.584981382787477*^9, 3.584981392882008*^9}, {
  3.648223802934882*^9, 
  3.648223814733605*^9}},ExpressionUUID->"1b7366fb-3b8e-4427-a333-\
c7cc588a1b88"],

Cell[CellGroupData[{

Cell["Cell types", "Subsubsection",
 PageBreakAbove->Automatic,
 CellChangeTimes->{{3.584981334625806*^9, 3.584981352152939*^9}, {
  3.5849814027861357`*^9, 3.584981405362398*^9}, {3.648223144260167*^9, 
  3.648223159004251*^9}, {3.648223818894066*^9, 
  3.648223820542143*^9}},ExpressionUUID->"83942b45-6a32-4e79-8e30-\
6f8180fd6de3"],

Cell[TextData[{
 "There are different style of cells in a ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " notebook. The bracket on the right side of the cell indicates what type of \
cell it is. This cell has a square bracket with a short horizontal line. This \
indicates that it is a text cell, so mathematica will not try to evaluate \
this cell. Input cells have a square bracket with a short diagonal line in \
the upper part. When you start typing in a new notebook, the default is an \
input cell. In you want to comment your notebook, you can change the style of \
a cell in many ways - click on the square bracket so that it is highlighted \
and change the style using the Style menu under the Format Pull-down menu. \
You can delete a cell by high-lighting its square bracket and pressing the \
delete button. "
}], "Text",
 CellChangeTimes->{{3.550828377789248*^9, 3.5508284435904417`*^9}, {
  3.550828515857108*^9, 3.55082860304108*^9}, {3.550828969393379*^9, 
  3.550829016543652*^9}, {3.550829047888125*^9, 3.550829064456257*^9}, {
  3.5849803620097103`*^9, 3.584980454033236*^9}, {3.6482231820228786`*^9, 
  3.648223214361821*^9}, {3.64822328088955*^9, 3.648223742110714*^9}, {
  3.64822382852013*^9, 3.648223830767358*^9}, {3.648226572514625*^9, 
  3.648226598756122*^9}},ExpressionUUID->"86a03abf-c975-4d63-b088-\
eea3117d65bf"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Evaluating an input cell", "Subsubsection",
 PageBreakAbove->Automatic,
 CellChangeTimes->{{3.584981334625806*^9, 3.584981352152939*^9}, {
  3.5849814027861357`*^9, 3.584981405362398*^9}, {3.648223144260167*^9, 
  3.648223159004251*^9}, {3.648223818894066*^9, 3.6482238383999243`*^9}, {
  3.648225821167099*^9, 
  3.6482258223092823`*^9}},ExpressionUUID->"eb61a623-c24f-4a6e-8776-\
3bc3b34474cb"],

Cell[TextData[{
 "You can evaluate an input cell by pressing \[OpenCurlyDoubleQuote]enter\
\[CloseCurlyDoubleQuote] or \[OpenCurlyDoubleQuote]shift-return\
\[CloseCurlyDoubleQuote]. You can evaluate individual cells in any order you \
choose or you can evaluate the entire notebook in order by choosing \
\[OpenCurlyDoubleQuote]Evaluate Notebook\[CloseCurlyDoubleQuote] in the \
Evaluation pull-down menu. Once evaluated, variable and function definitions \
will remain in memory (in the kernel), even if you close the notebook. You \
can delete these definitions in many ways, e.g., by restarting ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " or by choosing \[OpenCurlyDoubleQuote]Quit Kernel\[CloseCurlyDoubleQuote] \
in the Evaluation pull-down menu. "
}], "Text",
 CellChangeTimes->{{3.550828377789248*^9, 3.5508284435904417`*^9}, {
  3.550828515857108*^9, 3.55082860304108*^9}, {3.550828969393379*^9, 
  3.550829016543652*^9}, {3.550829047888125*^9, 3.550829064456257*^9}, {
  3.5849803620097103`*^9, 3.584980454033236*^9}, {3.6482231820228786`*^9, 
  3.648223214361821*^9}, {3.64822328088955*^9, 3.648223742110714*^9}, {
  3.6482238576019*^9, 3.648223878988048*^9}, {3.648225825725705*^9, 
  3.648225827429944*^9}, {3.648225872602394*^9, 3.648225994806559*^9}, {
  3.648226050461158*^9, 3.648226122331287*^9}, {3.648226655138723*^9, 
  3.6482267342576447`*^9}},ExpressionUUID->"980c9fa2-6df5-486f-b219-\
695db3d9d3e8"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Special Characters", "Subsubsection",
 PageBreakAbove->Automatic,
 CellChangeTimes->{{3.584981334625806*^9, 3.584981352152939*^9}, {
  3.5849814027861357`*^9, 3.584981405362398*^9}, {3.648223144260167*^9, 
  3.648223159004251*^9}, {3.648223818894066*^9, 3.6482238383999243`*^9}, {
  3.648225821167099*^9, 3.6482258223092823`*^9}, {3.648227832336192*^9, 
  3.648227838879328*^9}},ExpressionUUID->"60974eb8-e6b1-4521-a6cf-\
54a280fe258d"],

Cell[TextData[{
 "Beware that there are some input characters built into ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " and you must choose the correct character to get the correct response. For \
example, in options, you often use the \[OpenCurlyDoubleQuote]\[Rule]\
\[CloseCurlyDoubleQuote] symbol, see the plot command used later in this \
notebook for an example. If you use an arbitrary arrow from the palette, it \
may look right, but not evaluate correctly. You can get the correct arrow by \
typing -> from the keyboard. "
}], "Text",
 CellChangeTimes->{{3.550828377789248*^9, 3.5508284435904417`*^9}, {
  3.550828515857108*^9, 3.55082860304108*^9}, {3.550828969393379*^9, 
  3.550829016543652*^9}, {3.550829047888125*^9, 3.550829064456257*^9}, {
  3.5849803620097103`*^9, 3.584980454033236*^9}, {3.6482231820228786`*^9, 
  3.648223214361821*^9}, {3.64822328088955*^9, 3.648223742110714*^9}, {
  3.6482238576019*^9, 3.648223878988048*^9}, {3.648225825725705*^9, 
  3.648225827429944*^9}, {3.648225872602394*^9, 3.648225994806559*^9}, {
  3.648226050461158*^9, 3.648226122331287*^9}, {3.648226655138723*^9, 
  3.6482267342576447`*^9}, {3.648227847792554*^9, 
  3.648228030498494*^9}},ExpressionUUID->"554d3e2f-d142-4b1e-bfdf-\
222f1d548584"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["VARIABLES AND FUNCTIONS", "Subsection"]], "Subsection",
 PageBreakAbove->True,
 CellChangeTimes->{{3.584981382787477*^9, 
  3.584981392882008*^9}},ExpressionUUID->"ea5c33fa-b858-4605-8f22-\
49ddbe07c4c9"],

Cell[CellGroupData[{

Cell["Built-in Variables and Functions", "Subsubsection",
 CellChangeTimes->{{3.584981334625806*^9, 3.5849813396246758`*^9}, {
  3.5849813966022043`*^9, 
  3.584981398730134*^9}},ExpressionUUID->"581250af-cbd0-4679-876d-\
8841bb359be5"],

Cell[TextData[{
 "Built in functions, variables, and ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " commands always begin with an upper case letter. \nTherefore, to avoid \
overwriting ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " commands, define your own variable names beginning with a lower case \
letter."
}], "Text",
 CellChangeTimes->{{3.550827525584056*^9, 3.550827578327589*^9}, {
  3.6161892027086782`*^9, 
  3.616189221165464*^9}},ExpressionUUID->"23c16bd9-7452-45db-8994-\
dbe8e52fe326"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sin", "[", 
  RowBox[{"Pi", "/", "2"}], "]"}]], "Input",
 CellChangeTimes->{{3.550827592595522*^9, 
  3.550827596752901*^9}},ExpressionUUID->"a79d3243-fb3c-4a94-a7ed-\
0c10899ea4e3"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.550827597815772*^9, 3.550830491791106*^9, 
  3.616189395516158*^9, 
  3.6482238520862427`*^9},ExpressionUUID->"f4a776fb-c951-4eb1-aa35-\
b24ada497a49"]
}, Open  ]],

Cell[TextData[{
 "You can make equations look more like traditional math equations by using \
the palettes. Click on \[OpenCurlyDoubleQuote]Basic Math Assistant\
\[CloseCurlyDoubleQuote] in the ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " \[OpenCurlyDoubleQuote]Palettes\[CloseCurlyDoubleQuote] pull-down menu to \
open a pallete and explore some of the different commands. For example, use \
the Sin function under Trigonometric functions in the Basic Commands section \
to see the format of the Sin function. Use the fraction (4th box) in \
typesetting to create a numerator and denominator for the Sin function input. \
Click on the \[Pi] symbol in the Mathematical Constants area of Basic \
Commands to put a \[Pi] as the numerator and then use a tab to move the \
cursor to the denominator and put a 2 in the denominator."
}], "Text",
 CellChangeTimes->{{3.5508276164174833`*^9, 3.550827632640542*^9}, {
   3.5508278041723146`*^9, 3.550827836099841*^9}, {3.5508278785597477`*^9, 
   3.550827920349119*^9}, {3.5508279559090433`*^9, 3.550828238090818*^9}, {
   3.550828268156515*^9, 3.550828288788774*^9}, {3.6161893054581738`*^9, 
   3.616189318338153*^9}, 3.616189829296728*^9, 
   3.648222993405095*^9},ExpressionUUID->"dc710651-f744-4370-a726-\
72156f3f3522"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Sin", "[", 
  FractionBox["\[Pi]", "2"], "]"}]], "Input",
 CellChangeTimes->{{3.550827583384725*^9, 3.550827589144948*^9}, {
  3.550828019533629*^9, 3.5508280222495623`*^9}, {3.550828100046907*^9, 
  3.550828132706614*^9}, {3.550828241717247*^9, 3.550828253219247*^9}, {
  3.550828291940798*^9, 
  3.550828299565617*^9}},ExpressionUUID->"083a87eb-b5dd-432c-b9ff-\
90a14da1f651"],

Cell[BoxData["1"], "Output",
 CellChangeTimes->{3.502122274304255*^9, 3.505123936996097*^9, 
  3.505124051212531*^9, 3.550828314307557*^9, 3.550830491906328*^9, 
  3.616189395651497*^9},ExpressionUUID->"9eacf34b-7924-4328-8981-\
d9a59e7358dc"]
}, Open  ]],

Cell["\<\
Different brackets have different uses Only use [ ] for functions, ( ) for \
grouping terms in an equation, and { } for lists (e.g., vectors and matrices).\
\>", "Text",
 CellChangeTimes->{{3.550828325556958*^9, 3.550828328060244*^9}, {
  3.648226211069179*^9, 
  3.6482262232546883`*^9}},ExpressionUUID->"b10bf299-a325-4b49-b7e0-\
0704fc646338"]
}, Open  ]],

Cell[CellGroupData[{

Cell["User-defined Variables and Functions", "Subsubsection",
 PageBreakAbove->Automatic,
 CellChangeTimes->{{3.584981334625806*^9, 3.584981352152939*^9}, {
  3.5849814027861357`*^9, 
  3.584981405362398*^9}},ExpressionUUID->"3dee31dd-ebba-435a-b0e8-\
66c26bf72dd2"],

Cell[TextData[{
 "You can easily define your own variables using = and functions using =  or \
:=   .  \nThe := is a delayed evaluation; using = for defining a function \
uses the values of the variables when the function is defined, while := uses \
the values of the variables when the function is used.  Note below - y[t] \
will always be 2*(",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["t", "2"], TraditionalForm]],ExpressionUUID->
  "980dd2b3-cb09-4181-88bd-4e0687c6358c"],
 "+5), even if m is later given a new value. For :=, evaluation of the right \
hand side is delayed until it is used, so ydelay[t] will use the new value of \
m.\nA semicolon at the end of an input suppresses the output of the result \
from being printed to the screen."
}], "Text",
 CellChangeTimes->{{3.550828377789248*^9, 3.5508284435904417`*^9}, {
  3.550828515857108*^9, 3.55082860304108*^9}, {3.550828969393379*^9, 
  3.550829016543652*^9}, {3.550829047888125*^9, 3.550829064456257*^9}, {
  3.5849803620097103`*^9, 
  3.584980454033236*^9}},ExpressionUUID->"449b468a-db0a-4b65-bfc5-\
980504b26644"],

Cell[BoxData[
 RowBox[{
  RowBox[{"m", "=", "2"}], ";"}]], "Input",ExpressionUUID->"b6176293-1a43-4671-8358-81948de03681"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"y", "[", "t_", "]"}], "=", 
  RowBox[{"m", "*", 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["t", "2"], "-", "5"}], ")"}]}]}]], "Input",
 CellChangeTimes->{
  3.5508286648828287`*^9},ExpressionUUID->"a3e9b9d0-b93b-42f3-be56-\
2d7fd0356afd"],

Cell[BoxData[
 RowBox[{"2", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "5"}], "+", 
    SuperscriptBox["t", "2"]}], ")"}]}]], "Output",
 CellChangeTimes->{3.50212227445475*^9, 3.505123937145569*^9, 
  3.505124051339223*^9, 3.5508286918867607`*^9, 3.550830491957793*^9, 
  3.616189395734065*^9},ExpressionUUID->"5066165d-ab38-4aec-b4cb-\
58ac95984c09"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ydelay", "[", "t_", "]"}], ":=", 
  RowBox[{"m", "*", 
   RowBox[{"(", 
    RowBox[{
     SuperscriptBox["t", "2"], "-", "5"}], ")"}]}]}]], "Input",
 CellChangeTimes->{{3.550828668379125*^9, 
  3.550828669834844*^9}},ExpressionUUID->"b8392e90-bb50-4cf1-b72f-\
35712aeaf82f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"m", "=", "3"}], ";"}]], "Input",ExpressionUUID->"30c784c8-e176-4ca1-975e-539f881d680b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"y", "[", "t", "]"}]], "Input",
 CellChangeTimes->{
  3.550828681123218*^9},ExpressionUUID->"1125cab7-3e4a-4138-89d0-\
ed4752eaf82c"],

Cell[BoxData[
 RowBox[{"2", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "5"}], "+", 
    SuperscriptBox["t", "2"]}], ")"}]}]], "Output",
 CellChangeTimes->{3.502122274571299*^9, 3.505123937245963*^9, 
  3.5051240514735537`*^9, 3.550828697491261*^9, 3.550830492039864*^9, 
  3.6161893958016653`*^9},ExpressionUUID->"df1d29e0-28c7-4a41-82f2-\
76e2aa8b824c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ydelay", "[", "t", "]"}]], "Input",
 CellChangeTimes->{{3.550828684850894*^9, 
  3.5508286856590967`*^9}},ExpressionUUID->"09125fc4-5e33-4529-9f69-\
ceecee2b7743"],

Cell[BoxData[
 RowBox[{"3", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "5"}], "+", 
    SuperscriptBox["t", "2"]}], ")"}]}]], "Output",
 CellChangeTimes->{3.5021222746277637`*^9, 3.505123937280706*^9, 
  3.505124051508183*^9, 3.5508286990934687`*^9, 3.550830492076014*^9, 
  3.616189395861602*^9},ExpressionUUID->"a434cdd0-0cca-45d8-9ee6-\
08447b139530"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["PLOTTING", "Subsection"]], "Subsection",
 PageBreakAbove->True,ExpressionUUID->"b0a8e659-d9d9-4832-8ee8-dd9e1a9266f7"],

Cell["\<\
The form of the plot command is
\t\t\t\tPlot[function, {variable, minval, maxval}]
or
\t\t\t\tPlot[{function1, function2,function3}, {variable, minval, maxval}]
Additional commands have been added to label the plot and control the line \
style. You can get more information about the Plot command by right-clicking \
on the command and choosing \[OpenCurlyDoubleQuote]Get Help\
\[CloseCurlyDoubleQuote]. \
\>", "Text",
 CellChangeTimes->{{3.6482262545938663`*^9, 3.648226256537977*^9}, {
  3.6482262895745697`*^9, 3.648226339010232*^9}, {3.648228251713669*^9, 
  3.648228257961185*^9}},ExpressionUUID->"2a06fb73-523f-4ecc-a8f1-\
66d988b9cfa4"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "[", "t", "]"}], ",", 
     RowBox[{"ydelay", "[", "t", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", 
     RowBox[{"-", "4"}], ",", "4"}], "}"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", "}"}], ",", 
      RowBox[{"{", 
       RowBox[{"Dashing", "[", 
        RowBox[{"{", 
         RowBox[{"0.02", ",", "0.02"}], "}"}], "]"}], "}"}]}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<x - solid, y-dashed\>\""}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<t\>\"", ",", "\"\<\>\""}], "}"}]}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"Thickness", "[", "0.004", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.505123844486602*^9, {3.550829121916016*^9, 
   3.550829143051882*^9}},ExpressionUUID->"ca8c9620-acd3-4eea-869b-\
87ebfc618b82"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {
    {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], Opacity[
     1.], LineBox[CompressedData["
1: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
      "]]}}, {
    {RGBColor[0.880722, 0.611041, 0.142051], AbsoluteThickness[1.6], Opacity[
     1.], Dashing[{0.02, 0.02}], LineBox[CompressedData["
1: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
qrAP
      "]]}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"t\"", TraditionalForm], 
    FormBox["\"\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{210.33637152777726`, Automatic},
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotLabel->FormBox["\"x - solid, y-dashed\"", TraditionalForm],
  PlotRange->{{-4, 4}, {-14.999998863275339`, 32.99999608163273}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.502122274679234*^9, 3.505123937334832*^9, 3.5051240515625553`*^9, {
   3.550829127891794*^9, 3.550829144462227*^9}, 3.550830492173863*^9, 
   3.616189396742516*^9},ExpressionUUID->"d1c25243-10df-4df1-8260-\
d2c02cd17e6d"]
}, Open  ]],

Cell[TextData[{
 "Many first time users of ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " don't know what to do if the plot doesn\[CloseCurlyQuote]t appear. If you \
just evaluate the function and look at the result, then you can easily find \
the error, as shown below. Here,  the variable \[OpenCurlyDoubleQuote]a\
\[CloseCurlyDoubleQuote] is not defined. So, if you define a, then the \
function func[x] can easily be plotted. Also note that the variable a appears \
blue when it is not defined. The x is also blue, but the x is defined by the \
plot range in the Plot command."
}], "Text",
 CellChangeTimes->{{3.550829226373242*^9, 3.550829235651517*^9}, {
  3.5508293088128033`*^9, 3.550829361221489*^9}, {3.584981501301703*^9, 
  3.584981568669759*^9}, {3.648226379551647*^9, 
  3.648226393151676*^9}},ExpressionUUID->"1b545798-eae7-4728-9d9c-\
1fa2a8c96765"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"func", "[", "x_", "]"}], "=", 
   RowBox[{"21", " ", "a", " ", 
    RowBox[{"(", 
     RowBox[{
      SuperscriptBox["x", "2"], "-", "4"}], ")"}]}]}], ";", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"func", "[", "x", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "5"}], "}"}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.584981527902575*^9, 
  3.584981555086483*^9}},ExpressionUUID->"090b4306-aeec-44b8-85b4-\
338e47ebf49e"],

Cell[BoxData[
 GraphicsBox[{},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{223.49262152777715`, Automatic},
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 5}, {0., 0.}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.502122274726841*^9, 3.5051239373857193`*^9, 
  3.5051240516128683`*^9, 3.550829190376959*^9, 3.5508304922420197`*^9, 
  3.616189396992551*^9},ExpressionUUID->"7ced0fa2-352a-459d-9efa-\
6fbd41e32ddc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"func", "[", "x", "]"}]], "Input",ExpressionUUID->"ae67e60c-0a2e-4904-bb5e-f2b02afbf01e"],

Cell[BoxData[
 RowBox[{"21", " ", "a", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{"-", "4"}], "+", 
    SuperscriptBox["x", "2"]}], ")"}]}]], "Output",
 CellChangeTimes->{3.5021222748059196`*^9, 3.505123937434608*^9, 
  3.5051240516629057`*^9, 3.550829265227078*^9, 3.550830492276029*^9, 
  3.616189397043322*^9},ExpressionUUID->"591d477b-3446-4ac5-8949-\
802deba30e64"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"a", "=", "10"}], ";", 
  RowBox[{"Plot", "[", 
   RowBox[{
    RowBox[{"func", "[", "x", "]"}], ",", 
    RowBox[{"{", 
     RowBox[{"x", ",", "0", ",", "5"}], "}"}], ",", 
    RowBox[{"PlotStyle", "\[Rule]", 
     RowBox[{"Thickness", "[", "0.004", "]"}]}]}], "]"}]}]], "Input",
 CellChangeTimes->{
  3.505123854652776*^9},ExpressionUUID->"506a2d2b-1756-4998-b2b6-\
1ab530f8e05e"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {
    {RGBColor[0.368417, 0.506779, 0.709798], Thickness[0.004], Opacity[1.], 
     LineBox[CompressedData["
1:eJwd0Hk01fkbB3AiShRuJBGZmzEoayYlzwcjSWWrZCkJIcUgP6IUEt+vJUsm
I0rIVLZ7Y4QMH0sGIbIVyZ7GMu7lIq7l9/39nnOe85zXOe8/3ufZc8nbynUD
Dw9POrX/vyGXBDRcgvWn16kBEj+2mzpkI28LMpJbV9cofzpJ+srLe8DCiimH
S1nz5/dZQh994VZx0dgC5QAT260b5W8AQ8+sfYZyhc1I4LrbbYhLFn39lTJv
cQl7pScMpKr4HvZRpldwFZe5EWBeRvdppXy0DjksyhGgcdfPuIqye3NEAsco
BqrkWLQCytGdTfVst/uwFJ36OZWyzb+CIYvGCTDQ4Psk4n9535dSCz2J8Gt3
oIMX5RsLJ4o4Hg+goDiPdoYyGTRzco6bDCnOW9/qUs4P0w5nyf0O3lr2kqv6
JK4U6JGdYaaCw+mjJX2U28gbpdNGaTBv7GhRSnk2sXJ6wu0JqDyS9vOkHBat
Xse5mQENaxVcA8pkS6gYx/gpiGnFhkhSTrOk5832ZEKOyGvfsiMkzk7yX2Jn
ZMFskehoJOX8rvqjbI9smFROMT9NudLWY2iG+wwGSHWJcT0SDzkVSE7LvYAe
8Ug7zmEST2StO099ewFh+ubpryjPjlkwJ5kvofeQca8XZf4rc2YTRnkQ+6zc
cOgQiRV9D4aOuxXCBqN3Lfm6JJbq/cXNT4oBwhzeYXvKMsHTInM3GVDrf5kl
SJn+l779rDETtCdLubYHSaxjMDTP6nkFio/Dm8d0SHxomEj7Va8I4juVXoVT
1g/XNGJlFEFOHzdBjrLJ2/D4GY9i6LJXQZYHSHzOVFHlX+6fYERnnE3TInGw
pefFSbkysO+yuNquRuK1cJ2dAzFlkBbcOWJE+U4J74cPS2Wwpl21XLSfxHd3
pRiVd5SDwlCjQOw+EseN1SkSkRUws7v4oYIKiTNu7J5WnKmCB+qf0/r2klis
m2Mlsh9D76Z2ISXKVt52apEuGBBHVcqXTuKup3u/BbVj8OKXFltXIHGvQIXt
pdxqMBNqDF6RI/FI2zc9Dcda2J4XpB2xk/rHlVM7c5NrwbFkMCVXisSX+Yrn
6c210NiRn/Z+B4m/HbhdIKVbBzzHboWJSpJ4KlVCnof2FlgS7Hp/cRIvuBjy
va+vh34TVa1WIRJvXnrUeHV/E0zzsVNKlgh8MPJT0HGnJrg3eswv+zuB3SV2
qCo9aAK9Jf7D8YsErtdIjBtZagJu5YtEp3kC370SZW339h00vXl2aZJFYJ7P
1/tNHFogL8gt4tE4gYMHcgLFjNsgXES8+1oHgRNzjC3vXGiDJz4sh50fCPzy
2uhPMwFt0LNZq72mjcC93D19zS/bIK17NHRbK9VHKv1IlGg7BAwt88U3EHjB
ImnDel87/FrBIvf9RWCfmtsxU74d4B/Jl92bTeDvYg/y+6I7oKD3TI9ZFoFD
nJ63NmV3wPPDL4TfPCVwDE+76IvuDuhTtL6V9JjAz/UVkl0PdYJhZtF/VFMI
PFhel/6Ftwto+/5oXCMJbFG0ubAtvhsqEs+x6N4E7tmwu63qRTcspDc7n71G
4AtWmuyCmm5glxh8ivAk8FW2nVYspxt+FFdr+uJG4Ci1vNem53og6ZpkXeBF
AlflnsI1ch/Bu3SH1ElLAu/PTmovLvgE+x+PogANAm9PUV/EjZ/gqbm/gZ4a
gbnRLTIto5/gq/8//6ypErjBT9B9TLoXxuVvat5SIvAlo+A1icheaGAdzzwv
R+Dk4UsqAY59sB4Qt5IvTOAVec0IXdF+QPT8RzFjUXjslLvMwMFBkOIcu2sQ
H4W311+lhxgPgoJlXEFGbBQ2POKjKms1CN3NP7SuklE4QyVIz95zEA7LwzQz
Igo7bIpx6EkfhGWdn3N5g6Pwh+rCtPcbhsCSvk8RXKNwpfaiDG4eAvs1NSnN
g1H4ofQ92acXR6C/MGFqsScS6/qWFvI1f4Udd9YXz0/ew7U9jyy8f5wA405p
XN0fgTVi1vSlTKfhsZ6+zb/4Ljb5emhA3YYFE1WSgq/dwvH4vhJjzhQbhkOV
jx7nC8PBK4RWRdActMpY1XyJuIMFxb55nFaeh8XU4P7zUbfwxpaNJlv+WoCU
N0mtw6s3MLc1/2qiz3f4YhphN9Xvj8dsCnbu3r0MemAIApE+2CDK61pDPhcs
h3qXXX2u4OS10s1GjqvgGRN/LIG4iO1lak98nlsDHpPblwO2mGFhrDKlcIYH
DZ8cF5DNNkCuBzLnbVV50enTNY+PTzuigJBAK/l5XtR+uwo/NfJEERNJHa2t
G1CxY6SI5Jbr6ITytufCqXzI4qy+M9+JIBSbr4NPOPEj+kT1/YGzd1CTddbK
dd2NaO+MURc/OxzhFu8YVT4BpGktKmDtHYleXQlFzf0CSFn/x36X89Fotxkc
9CoWRHZk57ZzF+4jo3WH8Cc3N6GJZ3FtzekJyKW7arb0zGb0vOrwrnMNSUg/
NOxPJ3kh1Bs0jYQGklGiN/uN8LgQOqX90VOV+xAN33n29UnlFqSYWaijZJOK
Jl3LXGoihZFeeIdw4KM0xLomLtjiJIIMrSWt+hWeoALTdyuX921FpdHC66YN
Geiru7oO3/xW9LmOJ0mGNxNJ5/YmRbZsQzNlS+V+57NQ+EXfzBYzUbTXTIQt
mJuNFld2xpqViSJep7FQLJuDlN48/L2JLoZsrPPktyX9gQ44vzUXI8RQhIyD
edbic4TTJKSa58VQcY6XmFP4S6SEJchT9uKoCCs1OK/mopMbp2Q/VIoj8Z/M
z3ID8hGrb7S2UZmGStsXxot3FSLvtFgacZ+GZDjM5NEzDNTMS585nkBDChca
N3vaMpCyW3mTcBINXWifaWU7MNCoxnho/G805N7hcYLHhYHO/Y1YD9NpqNtY
fPseXwYynJ1rzsmlIfqodrdPHANJHrO7V/c3DfkJVO+1+JuB/PJZTvcaaaj2
t7I3g00M1CYeeeTYOxoyVq/O9GlloOj+Is67VhoaCll1ftDFQDx+Is4dXTTk
TyoX9Y8w0EQ6huERGhK0P3v3Ng8TmfDZ7Moeo6HgEFCR4GeibPfpBddxGtqT
+/MPuYJM5KglXfDPBJWXPyPwcSsTdTb4ybDZNKQc+MvvB2SZSGO/0PdXczSk
PvasoUWeieKSMjquz9OQh72k6WU6E5leaCG/f6f6O9OPpKgwUU6t8+XyZRoy
nK9maKgxEf9PywY3V6j+8V7+7zSZyCkuXlZ/jYZuaCtHu+owUeWc4tL6Og0N
DHHY67pM9F/hTe1W
      "]]}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{229.76801215277612`, Automatic},
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotRange->{{0, 5}, {-839.9999999999978, 4409.999785714287}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.50212227493839*^9, 3.505123937535961*^9, 
  3.5051240517632027`*^9, 3.5508292822092133`*^9, 3.5508304923462553`*^9, 
  3.616189397145637*^9},ExpressionUUID->"93cd00ed-5f09-4e27-aadb-\
7eb9c4da8031"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["ROOT FINDING", "Subsection"]], "Subsection",
 PageBreakAbove->True,ExpressionUUID->"9bd508aa-1531-4a83-96fa-70347d84bc88"],

Cell["\<\
The form of the root finding command is

\t\tFindRoot[lhs==rhs, {variable,starting value}]
\t\t
\"troot=t/.\" at the beginning assigns the value of t  found by the FindRoot \
command to the variable 'troot'. This part of the line is not needed, but is \
useful when the value of the root is needed in subsequent calculations. \
\>", "Text",
 CellChangeTimes->{{3.5508294325283813`*^9, 
  3.5508294354225683`*^9}},ExpressionUUID->"4c8c82a5-0cc5-4d8b-a944-\
4ed833712228"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"troot", "=", 
  RowBox[{"t", "/.", 
   RowBox[{"FindRoot", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"y", "[", "t", "]"}], "==", "0"}], ",", 
     RowBox[{"{", 
      RowBox[{"t", ",", "2"}], "}"}]}], "]"}]}]}]], "Input",
 CellChangeTimes->{
  3.550829854895904*^9},ExpressionUUID->"b2bb4e4a-9a94-4e44-b739-\
61cb6eb90542"],

Cell[BoxData["2.23606797749979`"], "Output",
 CellChangeTimes->{
  3.5021222750077257`*^9, 3.505123937584942*^9, 3.5051240518123217`*^9, {
   3.5508298512210712`*^9, 3.5508298555586023`*^9}, 3.550830492391745*^9, 
   3.616189397183477*^9},ExpressionUUID->"51579edf-6df0-46b2-a9b0-\
6a1abbc3dd47"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["DERIVATIVES", "Subsection",
 PageBreakAbove->
  Automatic,ExpressionUUID->"e646a4f2-5e23-4b1a-87d6-c21a8c7079ac"],

Cell[TextData[{
 "Derivatives can either be indicated with a prime or by using ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[PartialD]", "\[Placeholder]"], " ", "\[Placeholder]"}], 
   TraditionalForm]],ExpressionUUID->"fe8db8d9-f21b-4026-949c-05be4f8c6a1a"],
 " from the palette or using the D[ ] command.\n",
 StyleBox["D[", "MR"],
 StyleBox["f", "TI"],
 StyleBox[",", "MR"],
 " ",
 StyleBox["x", "TI"],
 StyleBox["]", "MR"],
 " gives the partial derivative ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{"\[PartialD]", "f"}], "/", 
    RowBox[{"\[PartialD]", "x"}]}], TraditionalForm]], "InlineFormula",
  ExpressionUUID->"4481f9d1-57a9-476a-acf0-4c85ecb6506f"],
 ". \n\t\tx'[t] = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    RowBox[{
     SubscriptBox["\[PartialD]", "t"], " ", 
     RowBox[{"x", "[", "t", "]"}]}], " "}], TraditionalForm]],ExpressionUUID->
  "b6c83a06-2fe3-4d7e-854a-d3ba55e03e69"],
 "  = D[x[t],t]\n\t\tx''[t] = ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[PartialD]", 
     RowBox[{"t", ",", "t"}]], 
    RowBox[{"x", "[", "t", "]"}]}], TraditionalForm]],ExpressionUUID->
  "296eef37-efd7-46c8-8a31-d772c081ba45"],
 " = D[x[t],{t,2}]\n\t\t",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubscriptBox["\[PartialD]", "y"], " ", "func"}], TraditionalForm]],
  ExpressionUUID->"814c5d83-30df-43cb-94c1-108788e05101"],
 "[y,z] = D[func[y,z],y]\nFurther information and examples can be found under \
the D built-in function in Help"
}], "Text",
 CellChangeTimes->{{3.502118526850037*^9, 3.502118527536433*^9}, 
   3.648227219889331*^9},ExpressionUUID->"adef2eee-67de-44c0-8da4-\
15e36483ca27"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"y", "[", "t", "]"}], "=", 
   RowBox[{"2", " ", 
    RowBox[{"(", 
     RowBox[{
      RowBox[{"-", "5"}], "+", 
      SuperscriptBox["t", "2"]}], ")"}]}]}], ";"}]], "Input",
 CellChangeTimes->{
  3.5508296915408897`*^9, {3.648227497134489*^9, 
   3.648227502871244*^9}},ExpressionUUID->"8214ea7a-c478-4274-a673-\
7a21113ed885"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"D", "[", 
  RowBox[{
   RowBox[{"y", "[", "t", "]"}], ",", "t"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"y", "'"}], "[", "t", "]"}], "\[IndentingNewLine]", 
 RowBox[{
  SubscriptBox["\[PartialD]", "t"], " ", 
  RowBox[{"y", "[", "t", "]"}]}]}], "Input",
 CellChangeTimes->{{3.550829693500011*^9, 
  3.550829696219743*^9}},ExpressionUUID->"f7350a5a-f483-4167-88ae-\
ef3f47a3606e"],

Cell[BoxData[
 RowBox[{"4", " ", "t"}]], "Output",
 CellChangeTimes->{3.5021222751387978`*^9, 3.505123937685362*^9, 
  3.505124051912079*^9, 3.550829701120159*^9, 3.550830492457925*^9, 
  3.6161893973134336`*^9},ExpressionUUID->"0557597b-fc13-4caf-8306-\
ea5c9d8787a4"],

Cell[BoxData[
 RowBox[{"4", " ", "t"}]], "Output",
 CellChangeTimes->{3.5021222751387978`*^9, 3.505123937685362*^9, 
  3.505124051912079*^9, 3.550829701120159*^9, 3.550830492457925*^9, 
  3.616189397317884*^9},ExpressionUUID->"56de3e07-0463-465c-a5bf-\
d7c7ffb42818"],

Cell[BoxData[
 RowBox[{"4", " ", "t"}]], "Output",
 CellChangeTimes->{3.5021222751387978`*^9, 3.505123937685362*^9, 
  3.505124051912079*^9, 3.550829701120159*^9, 3.550830492457925*^9, 
  3.616189397320519*^9},ExpressionUUID->"e5e1f708-fb65-452e-a4a4-\
08f1e8475bb6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["INTEGRALS", "Subsection"]], "Subsection",
 PageBreakAbove->False,ExpressionUUID->"5c580a38-cc9d-4df3-b762-5fa1a9599ce8"],

Cell[TextData[{
 "Integrals can either be indicated using ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", "\[Placeholder]", "\[Placeholder]"], 
    RowBox[{"\[Placeholder]", 
     RowBox[{"\[DifferentialD]", "\[Placeholder]"}]}]}], TraditionalForm]],
  ExpressionUUID->"add18e0c-3750-46ae-ae36-591c8e7f62c9"],
 " from the palette or using the Integrate[ ] or NIntegrate[ ] commands.",
 StyleBox["  \nIntegrate[", "MR"],
 StyleBox["f", "TI"],
 StyleBox[",", "MR"],
 " ",
 Cell[BoxData[
  FormBox["{", TraditionalForm]], "InlineFormula",ExpressionUUID->
  "b465a5d5-0372-45a9-a61b-bbb5b9aa147e"],
 StyleBox["x", "TI"],
 StyleBox[",", "MR"],
 " ",
 StyleBox["xmin", "TI"],
 StyleBox[",", "MR"],
 " ",
 StyleBox["xmax", "TI"],
 Cell[BoxData[
  FormBox["}", TraditionalForm]], "InlineFormula",ExpressionUUID->
  "0f37d75c-5541-463e-b695-66bf39b690a5"],
 StyleBox["]", "MR"],
 " gives the definite integral ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", "xmin", "xmax"], " ", 
    RowBox[{"f", " ", "d", "x"}]}], TraditionalForm]], "InlineFormula",
  ExpressionUUID->"066cfbb0-939b-413c-a6b6-55f44e42d9ec"],
 ". \n",
 StyleBox["NIntegrate[", "MR"],
 StyleBox["f", "TI"],
 StyleBox[",", "MR"],
 " ",
 Cell[BoxData[
  FormBox["{", TraditionalForm]], "InlineFormula",ExpressionUUID->
  "10c2bc76-613c-4fbf-a43b-527e19bbe6bf"],
 StyleBox["x", "TI"],
 StyleBox[",", "MR"],
 " ",
 StyleBox["xmin", "TI"],
 StyleBox[",", "MR"],
 " ",
 StyleBox["xmax", "TI"],
 Cell[BoxData[
  FormBox["}", TraditionalForm]], "InlineFormula",ExpressionUUID->
  "91b5bf8b-4ee2-4712-b927-1648bd4563f7"],
 StyleBox["]", "MR"],
 " gives a numerical approximation to the integral ",
 Cell[BoxData[
  FormBox[
   RowBox[{
    SubsuperscriptBox["\[Integral]", "xmin", "xmax"], " ", 
    RowBox[{"f", " ", "d", "x"}]}], TraditionalForm]], "InlineFormula",
  ExpressionUUID->"e9ef0055-bb23-4196-b60a-dbe59c316b3d"],
 ". "
}], "Text",
 CellChangeTimes->{{3.502118609070101*^9, 3.5021186354539557`*^9}, {
  3.64822807462399*^9, 
  3.6482280755990562`*^9}},ExpressionUUID->"11e87bf5-c5ab-4fd2-b167-\
d7108ff1ccec"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"\[Integral]", 
  RowBox[{
   RowBox[{"y", "[", "t", "]"}], 
   RowBox[{"\[DifferentialD]", "t"}]}]}]], "Input",
 CellChangeTimes->{
  3.550829820366769*^9},ExpressionUUID->"1b7a1986-ea56-4525-822c-\
fc9910a1fe24"],

Cell[BoxData[
 RowBox[{"2", " ", 
  RowBox[{"(", 
   RowBox[{
    RowBox[{
     RowBox[{"-", "5"}], " ", "t"}], "+", 
    FractionBox[
     SuperscriptBox["t", "3"], "3"]}], ")"}]}]], "Output",
 CellChangeTimes->{3.50212227529222*^9, 3.5051239377365007`*^9, 
  3.505124051962163*^9, 3.5508298316124563`*^9, 3.550830492536364*^9, 
  3.6161893973804417`*^9},ExpressionUUID->"1167b725-f55d-4eb9-aecb-\
4a172b1c8590"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  SubsuperscriptBox["\[Integral]", "0", "5"], 
  RowBox[{
   RowBox[{"y", "[", "t", "]"}], 
   RowBox[{"\[DifferentialD]", "t"}]}]}]], "Input",
 CellChangeTimes->{
  3.55082984209559*^9},ExpressionUUID->"7f7823b5-8b23-4867-a3a5-b3899a7c2ef2"],

Cell[BoxData[
 FractionBox["100", "3"]], "Output",
 CellChangeTimes->{
  3.502122275811289*^9, 3.505123937815626*^9, 3.505124052013115*^9, {
   3.550829833430347*^9, 3.550829842855297*^9}, 3.550830492825852*^9, 
   3.616189397473364*^9},ExpressionUUID->"a2b0bd3f-e8df-4207-b03d-\
1e9f74b34c9c"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["MATRICES", "Subsection",ExpressionUUID->"88eae994-2be9-4850-994c-567e30b9685c"],

Cell["\<\
Here is a simple example using a matrix A. We find the determinant and the \
eigenvalues of A.\
\>", "Text",ExpressionUUID->"065b5f92-f99e-4dce-b237-341e9aa5b443"],

Cell[CellGroupData[{

Cell["\<\
A = {{1.0,-2.0,3.0},{-2.0,4.0,1.0},{3.0,1.0,5.0}};MatrixForm[A]\
\>", "Input",
 AspectRatioFixed->
  True,ExpressionUUID->"27f055ee-b51c-4162-baf6-2c42e7eab2a5"],

Cell[BoxData[
 TagBox[
  RowBox[{"(", "\[NoBreak]", GridBox[{
     {"1.`", 
      RowBox[{"-", "2.`"}], "3.`"},
     {
      RowBox[{"-", "2.`"}], "4.`", "1.`"},
     {"3.`", "1.`", "5.`"}
    },
    GridBoxAlignment->{
     "Columns" -> {{Center}}, "ColumnsIndexed" -> {}, "Rows" -> {{Baseline}}, 
      "RowsIndexed" -> {}},
    GridBoxSpacings->{"Columns" -> {
        Offset[0.27999999999999997`], {
         Offset[0.7]}, 
        Offset[0.27999999999999997`]}, "ColumnsIndexed" -> {}, "Rows" -> {
        Offset[0.2], {
         Offset[0.4]}, 
        Offset[0.2]}, "RowsIndexed" -> {}}], "\[NoBreak]", ")"}],
  Function[BoxForm`e$, 
   MatrixForm[BoxForm`e$]]]], "Output",
 CellChangeTimes->{3.50212227587609*^9, 3.505123937863434*^9, 
  3.50512405206341*^9, 3.5508298729480658`*^9, 3.5508304929413033`*^9, 
  3.616189397504305*^9},ExpressionUUID->"c737643c-c514-45cc-92e0-\
85f5afa35495"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Det[A]", "Input",
 AspectRatioFixed->
  True,ExpressionUUID->"c2b349c7-2d8d-4b34-89db-794e9fb4a279"],

Cell[BoxData[
 RowBox[{"-", "49.`"}]], "Output",
 CellChangeTimes->{3.502122275934909*^9, 3.505123937898191*^9, 
  3.505124052112726*^9, 3.5508298756681757`*^9, 3.550830492975245*^9, 
  3.616189397563743*^9},ExpressionUUID->"185fb818-c399-4cff-bafb-\
251660591b0b"]
}, Open  ]],

Cell[CellGroupData[{

Cell["eigvals = Eigenvalues[A]", "Input",
 AspectRatioFixed->
  True,ExpressionUUID->"4aaa4a39-fbe9-4593-afe3-6bd9af38ed96"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"6.60756134959155`", ",", "4.9044753166263035`", ",", 
   RowBox[{"-", "1.5120366662178542`"}]}], "}"}]], "Output",
 CellChangeTimes->{3.502122276022729*^9, 3.505123937952705*^9, 
  3.505124052163055*^9, 3.5508298777704487`*^9, 3.5508304930085993`*^9, 
  3.6161893976299553`*^9},ExpressionUUID->"88f7b92b-e035-4777-b00e-\
3c2dee8be201"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["MORE ON PLOTTING", "Subsection",
 PageBreakAbove->Automatic,
 CellChangeTimes->{{3.550826975909459*^9, 
  3.550826979997477*^9}},ExpressionUUID->"16f637f5-c943-405c-876d-\
a8e97633d17d"],

Cell[TextData[{
 "The Options command gives you a list for a particular command of all the \
options and their default values. Here, we list the options for the ",
 StyleBox["Plot",
  FontWeight->"Bold"],
 " command. In the following plots, some of these options are demonstrated. \n\
\n\[DoubleRightArrow] Always label axes using ",
 StyleBox["AxesLabel",
  FontWeight->"Bold"],
 ". If desired, use ",
 StyleBox["PlotLabel",
  FontWeight->"Bold"],
 " to label the plot.\n\[DoubleRightArrow] The labeling is usually too small, \
so increase the font with the option ",
 StyleBox["TextStyl",
  FontWeight->"Bold"],
 "e when printing a plot for a report.\n\[DoubleRightArrow] ",
 StyleBox["PlotStyle ",
  FontWeight->"Bold"],
 "can be used to customize curve styles, e.g., when using dashed lines to \
distinguish curves when printing in black and white."
}], "Text",
 CellChangeTimes->{{3.584981721506255*^9, 3.58498179109746*^9}, {
   3.5849818314104643`*^9, 3.584981832162526*^9}, {3.5849818627950287`*^9, 
   3.584981864690591*^9}, {3.616189533151516*^9, 3.6161895362222443`*^9}, {
   3.648226808713122*^9, 3.648226847356421*^9}, 
   3.648227228422086*^9},ExpressionUUID->"bd7ec67a-8385-47d9-a8d5-\
f3a4676afa2d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Options", "[", "Plot", "]"}]], "Input",ExpressionUUID->"40676074-f314-4e61-89c3-56b7feca72fe"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"AlignmentPoint", "\[Rule]", "Center"}], ",", 
   RowBox[{"AspectRatio", "\[Rule]", 
    FractionBox["1", "GoldenRatio"]}], ",", 
   RowBox[{"Axes", "\[Rule]", "True"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", "None"}], ",", 
   RowBox[{"AxesOrigin", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"AxesStyle", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"Background", "\[Rule]", "None"}], ",", 
   RowBox[{"BaselinePosition", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"BaseStyle", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"ClippingStyle", "\[Rule]", "None"}], ",", 
   RowBox[{"ColorFunction", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"ColorFunctionScaling", "\[Rule]", "True"}], ",", 
   RowBox[{"ColorOutput", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"ContentSelectable", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"CoordinatesToolOptions", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"DisplayFunction", "\[RuleDelayed]", "$DisplayFunction"}], ",", 
   RowBox[{"Epilog", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"Evaluated", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"EvaluationMonitor", "\[Rule]", "None"}], ",", 
   RowBox[{"Exclusions", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"ExclusionsStyle", "\[Rule]", "None"}], ",", 
   RowBox[{"Filling", "\[Rule]", "None"}], ",", 
   RowBox[{"FillingStyle", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"FormatType", "\[RuleDelayed]", "TraditionalForm"}], ",", 
   RowBox[{"Frame", "\[Rule]", "False"}], ",", 
   RowBox[{"FrameLabel", "\[Rule]", "None"}], ",", 
   RowBox[{"FrameStyle", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"FrameTicks", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"FrameTicksStyle", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"GridLines", "\[Rule]", "None"}], ",", 
   RowBox[{"GridLinesStyle", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"ImageMargins", "\[Rule]", "0.`"}], ",", 
   RowBox[{"ImagePadding", "\[Rule]", "All"}], ",", 
   RowBox[{"ImageSize", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"ImageSizeRaw", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"LabelStyle", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"MaxRecursion", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Mesh", "\[Rule]", "None"}], ",", 
   RowBox[{"MeshFunctions", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"#1", "&"}], "}"}]}], ",", 
   RowBox[{"MeshShading", "\[Rule]", "None"}], ",", 
   RowBox[{"MeshStyle", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Method", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"PerformanceGoal", "\[RuleDelayed]", "$PerformanceGoal"}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "None"}], ",", 
   RowBox[{"PlotLegends", "\[Rule]", "None"}], ",", 
   RowBox[{"PlotPoints", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"PlotRange", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"Full", ",", "Automatic"}], "}"}]}], ",", 
   RowBox[{"PlotRangeClipping", "\[Rule]", "True"}], ",", 
   RowBox[{"PlotRangePadding", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"PlotRegion", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"PlotTheme", "\[RuleDelayed]", "$PlotTheme"}], ",", 
   RowBox[{"PreserveImageOptions", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Prolog", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"RegionFunction", "\[Rule]", 
    RowBox[{"(", 
     RowBox[{"True", "&"}], ")"}]}], ",", 
   RowBox[{"RotateLabel", "\[Rule]", "True"}], ",", 
   RowBox[{"TargetUnits", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"Ticks", "\[Rule]", "Automatic"}], ",", 
   RowBox[{"TicksStyle", "\[Rule]", 
    RowBox[{"{", "}"}]}], ",", 
   RowBox[{"WorkingPrecision", "\[Rule]", "MachinePrecision"}]}], 
  "}"}]], "Output",
 CellChangeTimes->{3.5021222760992804`*^9, 3.50512393800421*^9, 
  3.505124052215074*^9, 3.55083049304251*^9, 3.616189397696515*^9, 
  3.648226785686198*^9},ExpressionUUID->"2feef108-2c8b-4266-a68a-\
7f2e499e6764"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"y", "[", "t", "]"}], ",", 
     RowBox[{"ydelay", "[", "t", "]"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "10"}], "}"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<t\>\"", ",", "\"\<y\>\""}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Example Plot\>\""}], ",", 
   RowBox[{"BaseStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"FontSize", "\[Rule]", "14"}], "}"}]}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Thickness", "[", "0.004", "]"}], ",", 
        RowBox[{"Dashing", "[", 
         RowBox[{"{", 
          RowBox[{"0.", ",", "0."}], "}"}], "]"}]}], "}"}], ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Thickness", "[", "0.004", "]"}], ",", 
        RowBox[{"Dashing", "[", 
         RowBox[{"{", 
          RowBox[{"0.02", ",", "0.02"}], "}"}], "]"}]}], "}"}]}], "}"}]}], 
   ",", 
   RowBox[{"PlotPoints", "\[Rule]", "100"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.505123870446308*^9, 3.505123929917418*^9}, {
  3.5051239627919807`*^9, 3.505124015582982*^9}, {3.550829888049272*^9, 
  3.550829891040494*^9}},ExpressionUUID->"4c29f835-a136-40bb-97e4-\
296fe814156f"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {
    {RGBColor[0.368417, 0.506779, 0.709798], Thickness[0.004], Opacity[1.], 
     Dashing[{0., 0.}], LineBox[CompressedData["
1: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
Khjwf+CnPaE=
      "]]}}, {
    {RGBColor[0.880722, 0.611041, 0.142051], Thickness[0.004], Opacity[1.], 
     Dashing[{0.02, 0.02}], LineBox[CompressedData["
1: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
iQn/ByQ2MjY=
      "]]}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"t\"", TraditionalForm], 
    FormBox["\"y\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{313.03819444444326`, Automatic},
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotLabel->FormBox["\"Example Plot\"", TraditionalForm],
  PlotRange->{{0, 10}, {-14.999999999999972`, 284.99999393939396`}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{
  3.502122276175901*^9, 3.505123938287513*^9, {3.505123992976097*^9, 
   3.505124016050972*^9}, 3.505124052264204*^9, 3.550829893163629*^9, 
   3.550830493075768*^9, 
   3.6161893977623997`*^9},ExpressionUUID->"70a7a1ac-67db-43c2-aa60-\
1a5212ecf933"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " guesses at the ordinate plot range. Therefore, the resulting plot may not \
represent what you expect. You change the plot the range using the PlotRange\
\[Rule] option as shown below to obtain the plot range you desire. "
}], "Text",
 CellChangeTimes->{
  3.550829902790146*^9, {3.55082997434398*^9, 3.550830155914599*^9}, {
   3.6482268733450737`*^9, 3.6482269125472317`*^9}, {3.648226952264802*^9, 
   3.648226957327784*^9}, {3.6482277567051697`*^9, 
   3.648227791770691*^9}},ExpressionUUID->"03f64d77-a50f-4935-a805-\
e9a80b92e34a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "10"}], " ", "t"}]], " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"2", " ", "\[Pi]", " ", "10", " ", "t"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<t\>\"", ",", "\"\<x\>\""}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Decaying oscillation\>\""}], ",", 
   RowBox[{"BaseStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"FontSize", "\[Rule]", "14"}], "}"}]}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"Thickness", "[", "0.004", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.505124038471759*^9},ExpressionUUID->"9b17bfc9-457d-46e2-a0bc-\
6765b7d471bc"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {{
     {RGBColor[0.368417, 0.506779, 0.709798], Thickness[0.004], Opacity[1.], 
      LineBox[CompressedData["
1:eJwBQQG+/iFib1JlAgAAABMAAAACAAAA6v/pF7Siyz+AHT4RbfavP0brP2Xe
uss/S9DSZkNrrT+a+b55BQzMPzk0YaGXraQ/QBa9olOuzD8Z2YmTdXJ5PwSV
FW9FuMw/S2cJ6Z4YcT/IE247N8LMP3QN3DEvlGE/TxEf1BrWzD+Qegvkn7he
v14MgQXi/cw/q9940+L7g797AkVocE3NP4UwNQ+dVpm/PoGdNGJXzT8EbqoH
gSubvwIA9gBUYc0/aY920/j6nL+K/aaZN3XNP9yxlOyKRKC/mPgIy/6czT+U
TDi+Jq+jv7buzC2N7M0/8oZkwb/oqb96bSX6fvbNP/IK2R9KoKq/Pux9xnAA
zj+3sKWbL1Srv8XpLl9UFM4/pbTlc96wrL/U5JCQGzzOP4UBjgOlPK+/p63w
zYY9zj+xWSDSgVKvv5iLncM=
       "]], LineBox[CompressedData["
1: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
+r+nwf8B+VaB6w==
       "]], 
      LineBox[{{0.16959224243599005`, -0.061176354313079336`}, {
       0.1732486515497952, -0.019420762235160864`}, {
       0.17355446052786644`, -0.015990980962545833`}, {
       0.1738602695059377, -0.012576078096978895`}, {
       0.17447188746208014`, -0.005795686241335526}, {0.1756951233743651, 
       0.007534760471477686}, {0.178141595198935, 0.03302531862456958}, {
       0.17844740417700622`, 0.036081405022727955`}, {0.17875321315507747`, 
       0.03910524036663129}, {0.17936483111121992`, 0.04505239820148081}, {
       0.18058806702350488`, 0.05651938176617381}, {0.18127503116601343`, 
       0.06242695651513497}}], 
      LineBox[{{0.023751739652936827`, 0.06242695651513497}, {
       0.024948584154203698`, 0.002517246658552219}, {
       0.025281079388818843`, -0.013714878347195128`}, {
       0.025613574623433985`, -0.02983330253939615}, {
       0.02626756786095787, -0.061176354313079336`}}], 
      LineBox[{{0.12162212204680732`, 0.06242695651513497}, {
       0.1217769809411796, 0.05951132115499453}, {0.12244484672737638`, 
       0.04698490701644175}, {0.12378057829976992`, 0.022199161442595636`}, {
       0.12645204144455702`, -0.025726575693666386`}, {
       0.1267859743376554, -0.03151510348980253}, {
       0.12711990723075378`, -0.0372509231552545}, {
       0.12778777301695057`, -0.04855555980112925}, {
       0.12855819983290304`, -0.061176354313079336`}}], 
      LineBox[{{0.07297504480647611, -0.061176354313079336`}, {
       0.07538770442964661, 0.01146127774453884}, {0.07569207574923459, 
       0.020392483315727572`}, {0.07599644706882258, 0.029261862266614754`}, {
       0.07660518970799857, 0.046803420020506775`}, {0.07716113320935752, 
       0.06242695651513497}}]}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"t\"", TraditionalForm], 
    FormBox["\"x\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{292.7734375, Automatic},
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotLabel->FormBox["\"Decaying oscillation\"", TraditionalForm],
  PlotRange->{{0, 1}, {-0.061176354313079336`, 0.06242695651513497}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.502122276326744*^9, 3.505123938335978*^9, 
  3.505124052374819*^9, 3.550829898455258*^9, 3.5508304931082773`*^9, 
  3.616189397952117*^9},ExpressionUUID->"3e71cf79-cda3-4d31-b9a7-\
97fe13198d09"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "10"}], " ", "t"}]], " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"2", " ", "\[Pi]", " ", "10", " ", "t"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<t\>\"", ",", "\"\<x\>\""}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Decaying oscillation\>\""}], ",", 
   RowBox[{"BaseStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"FontSize", "\[Rule]", "14"}], "}"}]}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"Thickness", "[", "0.004", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{{3.505124041328701*^9, 
  3.505124045719266*^9}},ExpressionUUID->"744e060f-cc4f-4302-a250-\
1b4f2fb9c29f"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {{
     {RGBColor[0.368417, 0.506779, 0.709798], Thickness[0.004], Opacity[1.], 
      LineBox[CompressedData["
1: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
Ns0Jd6V3Lv3/vzuv/81yXBjghP8BdU4r1w==
       "]]}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"t\"", TraditionalForm], 
    FormBox["\"x\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{301.54296875, Automatic},
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotLabel->FormBox["\"Decaying oscillation\"", TraditionalForm],
  PlotRange->{All, All},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.550829933556275*^9, 3.550830493141212*^9, 
  3.61618939799442*^9},ExpressionUUID->"4b9e350b-026c-4e36-89ac-d88e04649308"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Plot", "[", 
  RowBox[{
   RowBox[{
    SuperscriptBox["\[ExponentialE]", 
     RowBox[{
      RowBox[{"-", "10"}], " ", "t"}]], " ", 
    RowBox[{"Cos", "[", 
     RowBox[{"2", " ", "\[Pi]", " ", "10", " ", "t"}], "]"}]}], ",", 
   RowBox[{"{", 
    RowBox[{"t", ",", "0", ",", "1"}], "}"}], ",", 
   RowBox[{"AxesLabel", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"\"\<t\>\"", ",", "\"\<x\>\""}], "}"}]}], ",", 
   RowBox[{"PlotLabel", "\[Rule]", "\"\<Decaying oscillation\>\""}], ",", 
   RowBox[{"BaseStyle", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"FontSize", "\[Rule]", "14"}], "}"}]}], ",", 
   StyleBox[
    RowBox[{"PlotRange", "->", 
     RowBox[{"{", 
      RowBox[{"Automatic", ",", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "}"}]}],
    FontWeight->"Bold"], ",", 
   RowBox[{"PlotStyle", "\[Rule]", 
    RowBox[{"Thickness", "[", "0.004", "]"}]}]}], "]"}]], "Input",
 CellChangeTimes->{
  3.5508300773909388`*^9},ExpressionUUID->"1b5a7546-28af-4b9f-8202-\
65536ebda18b"],

Cell[BoxData[
 GraphicsBox[{{}, {}, {{
     {RGBColor[0.368417, 0.506779, 0.709798], Thickness[0.004], Opacity[1.], 
      LineBox[CompressedData["
1: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
Ns0Jd6V3Lv3/vzuv/81yXBjghP8BdU4r1w==
       "]]}}}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{
    FormBox["\"t\"", TraditionalForm], 
    FormBox["\"x\"", TraditionalForm]},
  AxesOrigin->{0, 0},
  BaseStyle->{FontSize -> 14},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImageSize->{297.421875, Automatic},
  Method->{"DefaultBoundaryStyle" -> Automatic, "ScalingFunctions" -> None},
  PlotLabel->FormBox["\"Decaying oscillation\"", TraditionalForm],
  PlotRange->{{0., 0.9999999795918367}, {-1, 1}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {0, 0}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.5508304931597013`*^9, 
  3.616189398037633*^9},ExpressionUUID->"453b0ada-11dd-40d1-9cf4-\
435e867ef9f6"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Free Form Input", "Subsection",
 PageBreakAbove->True,
 CellChangeTimes->{{3.58498104087724*^9, 
  3.584981045083709*^9}},ExpressionUUID->"73b43ee7-5ad3-4a0c-8131-\
ea85a3983aa6"],

Cell[TextData[{
 "If you can\[CloseCurlyQuote]t find the command you are looking for, ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " will make suggestions from free-form linguistic input that follow a \
leading =. You need to be connected to the Internet for free form input to \
work. The result will include the syntax for how to create the result ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " guessed that you wanted. This is a way to learn the syntax, but it is \
better to write your own code once you have an idea of how ",
 StyleBox["Mathematica",
  FontSlant->"Italic"],
 " works."
}], "Text",
 CellChangeTimes->{{3.550830244892827*^9, 3.550830267580611*^9}, {
  3.550830298896022*^9, 3.5508303561654463`*^9}, {3.616189909497088*^9, 
  3.616190033101993*^9}, {3.648227233704463*^9, 3.6482272373599157`*^9}, {
  3.648228150199551*^9, 
  3.648228150686368*^9}},ExpressionUUID->"7e3ef112-081e-4d5b-b707-\
4ed0175d6df3"],

Cell[CellGroupData[{

Cell[BoxData[
 NamespaceBox["WolframAlphaQueryResults",
  DynamicModuleBox[{Typeset`q$$ = "graph E^(-10 t) Cos[2 \[Pi] 10 t]", 
   Typeset`opts$$ = {
   AppearanceElements -> {"Extrusion", "Warnings", "Assumptions", "Pods"}, 
    Asynchronous -> All, 
    Method -> {
     "ExtrusionChosen" -> {
       "Plot", "Plots", 1, 2, "Input", 
        "Plot[Cos[20 Pi t]/E^(10 t), {t, -0.2, 0.2}]"}, 
      "Formats" -> {"cell", "minput", "moutput", "msound", "dataformats"}, 
      "ExtrusionOpen" -> False}}, Typeset`elements$$ = {
   "Extrusion", "Warnings", "Assumptions", "Pods"}, Typeset`pod1$$ = 
   XMLElement[
   "pod", {"title" -> "Input interpretation", "scanner" -> "Identity", "id" -> 
     "Input", "position" -> "100", "error" -> "false", "numsubpods" -> "1"}, {
    
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement["cell", {"compressed" -> False, "string" -> True}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             TagBox[
              GridBox[{{
                 PaneBox[
                  StyleBox[
                   TagBox[
                    GridBox[{{
                    StyleBox[
                    "\"plot\"", {
                    LineIndent -> 0, LineSpacing -> {0.9, 0, 1.5}}], 
                    RowBox[{
                    SuperscriptBox["\[ExponentialE]", 
                    RowBox[{
                    RowBox[{"-", "10"}], " ", "t"}]], " ", 
                    RowBox[{"cos", "(", 
                    RowBox[{"2", " ", "\[Pi]", 
                    StyleBox["\[Times]", 
                    GrayLevel[0.6]], "10", " ", "t"}], ")"}]}]}}, 
                    GridBoxBackground -> {"Columns" -> {
                    GrayLevel[0.949], None}, "Rows" -> {{None}}}, 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    ColumnsEqual -> False, RowsEqual -> False, 
                    GridBoxDividers -> {"Columns" -> {
                    GrayLevel[0.84], 
                    GrayLevel[0.84], 
                    GrayLevel[0.84]}, "Rows" -> {{
                    GrayLevel[0.84]}}, 
                    "RowsIndexed" -> {
                    1 -> GrayLevel[0.84], -1 -> GrayLevel[0.84]}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {2, 2, 2}, "Rows" -> {{1}}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Baseline}}}, 
                    AllowScriptLevelChange -> False, BaselinePosition -> 1], 
                    Global`TagBoxWrapper["Separator" -> " | "]], 
                   LineSpacing -> {1, 0, 1.5}, LineIndent -> 0], 
                  BaselinePosition -> Center]}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               ColumnsEqual -> False, RowsEqual -> False, 
               GridBoxSpacings -> {"Columns" -> {{
                    AbsoluteThickness[-1]}}, "Rows" -> {{0}}}, 
               AllowScriptLevelChange -> False], 
              Global`TagBoxWrapper["Separator" -> " | "]], 
             PolynomialForm[#, TraditionalOrder -> False]& ], 
            TraditionalForm]], "Output", {}]}], 
       XMLElement["dataformats", {}, {"plaintext"}]}]}], Typeset`pod2$$ = 
   XMLElement[
   "pod", {"title" -> "Plots", "scanner" -> "Plot", "id" -> "Plot", 
     "position" -> "200", "error" -> "false", "numsubpods" -> "2"}, {
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[Cos[20 Pi t]/E^(10 t), {t, -0.2, 0.2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3306$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3305$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3305$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3306$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2874158$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3305$\
2874163$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3306$2874164$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3306$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3305$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2874158$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3305$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3305$\
2874163$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3306$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3306$\
2874164$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2874142[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    E^((-10) Global`t) Cos[(20 Pi) Global`t], {Global`t, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3305$$], 
                    (
                    Piecewise[{{
                    0. + 0.21380899352993948` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    0.21380899352993948` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3305$$], \
-0.2], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3305$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3306$$]], \

                    (Piecewise[{{
                    0. + 0.21380899352993948` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    0.21380899352993948` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3305$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3306$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3305$$ + 
                    0.0004, 
                    CalculateUtilities`GraphicsUtilities`Private`max3306$$]], 
                    0.2]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, PlotRange -> 
                    Automatic, Ticks -> Automatic, ImageSize -> {300.}, 
                    AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3305$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3306$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, Global`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 2]]; 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat -> 
                    Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2874142]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2874142[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2874142[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbikw3t/+ARKfkTqG4AsSoxtj0oCSlO+\
9JU5i4drBdrbBnwef3STN2lWK6QBN6YdTfWke3z333PWeHosg6fd6PXXdmA+\
CxckWnp4YMxKzXBQ83j/LJVGKCp5cw2d3jAmJ3iMMfpDY+\
W4a817IGWh3foPvA4sKBpp81ZRRTYmaHkjIMxqp2jOW9MT8ZMpEBIz+JM+2X7/\
aGb4cOhiMZQxaE8nVi7aQeSZBkaSHQDeMeceAf3PHx+\
XxU8FYSL4XhEdEPTTeiYTYwAgODPPxvvVqM3UPE9PAY5DxpdNk5Tlqe4HSkvJ0QmY5vnExWcO2wCBT\
5bi5X3KzTkEu/Fv4QIQ2JuexSduzJdAvjCtG33lZ/XPuBnh+2xZeitPVxGF+\
uwx5A01PiFqm83nrOjlGqq610c+5uqz5stEgL54y9f/\
SEVV6OYzttmGQ2bGp8WrtLcPvtIUXOXb9XNwPjPnsHCXgquFQCe6jiAs2j6KZ8sBJtH26KjcOh3G34\
jtEp08FK5zAxFn2i+\
2PRxV4vSmEWLvpBqTD6xkQkJwYV2y53aMp1aMMJEQGeH5dv2yyiahD8bizfe0pj6kZYI6QdcsTmsNk\
oe6go+zLHxW3ksu5JkPeD7kmKZFrRX8b6yMNuTyeCM9IQrygqVdvDqukxiC9ZT8oQcIcOEVI+\
st87Df3cLESSNWBRHVJx+LAlubMP4l+\
WeAjwlOdNXdsz9Hl3baYTSBOa9UFNEkWp83mmO43mW7c0BzoviT4lsR/oHebQrcp/\
NVNYWkP7taEbk3o1oRuTejWhP93TbAR47/Sb18ouH4="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}]}], 
     XMLElement["subpod", {"title" -> ""}, {
       XMLElement[
       "minput", {}, {"Plot[Cos[20 Pi t]/E^(10 t), {t, -1.2, 1.2}]"}], 
       XMLElement["cell", {"compressed" -> True, "string" -> False}, {
         Cell[
          BoxData[
           FormBox[
            TagBox[
             FormBox[
              StyleBox[
               
               DynamicModuleBox[{
                CalculateUtilities`GraphicsUtilities`Private`max3308$$ = 0.5, 
                 CalculateUtilities`GraphicsUtilities`Private`min3307$$ = \
-0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False, 
                 Typeset`show$$ = True, Typeset`bookmarkList$$ = {}, 
                 Typeset`bookmarkMode$$ = "Menu", Typeset`animator$$, 
                 Typeset`animvar$$ = 1, Typeset`name$$ = "\"untitled\"", 
                 Typeset`specs$$ = {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$], {
                    False, True}}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3307$$], \
-0.5, "min"}, -1, 1}, {{
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3308$$], 
                    0.5, "max"}, -1, 1}, {
                    Hold[
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]], 
                    Manipulate`Dump`ThisIsNotAControl}}, Typeset`size$$ = 
                 Automatic, Typeset`update$$ = 0, Typeset`initDone$$ = False, 
                 Typeset`skipInitDone$$ = False, 
                 CalculateUtilities`GraphicsUtilities`Private`more$2874231$$ = 
                 False, CalculateUtilities`GraphicsUtilities`Private`min3307$\
2874232$$ = 0, CalculateUtilities`GraphicsUtilities`Private`max3308$2874233$$ = 
                 0}, 
                DynamicBox[
                 Manipulate`ManipulateBoxes[
                 2, TraditionalForm, 
                  "Variables" :> {
                   CalculateUtilities`GraphicsUtilities`Private`max3308$$ = 
                    0.5, CalculateUtilities`GraphicsUtilities`Private`min3307$\
$ = -0.5, CalculateUtilities`GraphicsUtilities`Private`more$$ = False}, 
                  "ControllerVariables" :> {
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`more$$, 
                    CalculateUtilities`GraphicsUtilities`Private`more$2874231$\
$, False], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`min3307$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3307$\
2874232$$, 0], 
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`max3308$$, 
                    CalculateUtilities`GraphicsUtilities`Private`max3308$\
2874233$$, 0]}, "OtherVariables" :> {
                   Typeset`show$$, Typeset`bookmarkList$$, 
                    Typeset`bookmarkMode$$, Typeset`animator$$, 
                    Typeset`animvar$$, Typeset`name$$, Typeset`specs$$, 
                    Typeset`size$$, Typeset`update$$, Typeset`initDone$$, 
                    Typeset`skipInitDone$$}, "Body" :> Quiet[
                    Function[Null, 
                    CalculateUtilities`GraphicsUtilities`Private`post$2874215[
                    
                    Plot[
                    SlotSequence[1], AspectRatio -> If[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`aspect], 
                    Automatic, 1/GoldenRatio]]], HoldAll][
                    E^((-10) Global`t) Cos[(20 Pi) Global`t], {Global`t, 
                    If[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3307$$], 
                    (
                    Piecewise[{{
                    0. + 1.2828539611796368` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.2828539611796368` Tan[1.5040801783846716` #]]& )[
                    CalculateUtilities`GraphicsUtilities`Private`min3307$$], \
-1.2], 
                    If[
                    And[
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`min3307$$], 
                    NumericQ[
                    CalculateUtilities`GraphicsUtilities`Private`max3308$$]], \

                    (Piecewise[{{
                    0. + 1.2828539611796368` Tan[1.5040801783846716` #], # < 
                    0}}, 0. + 
                    1.2828539611796368` Tan[1.5040801783846716` #]]& )[
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`min3307$$ == 
                    CalculateUtilities`GraphicsUtilities`Private`max3308$$, 
                    CalculateUtilities`GraphicsUtilities`Private`min3307$$ + 
                    0.0024, 
                    CalculateUtilities`GraphicsUtilities`Private`max3308$$]], 
                    1.2]}, LabelStyle -> {FontFamily -> "Bitstream Charter"}, 
                    WorkingPrecision -> MachinePrecision, PlotRange -> 
                    Automatic, Ticks -> Automatic, ImageSize -> {300.}, 
                    AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], 
                    RawBoxes[
                    FormBox["y", TraditionalForm]]}, AxesLabel -> {
                    RawBoxes[
                    FormBox["t", TraditionalForm]], None}]], 
                  "Specifications" :> {{
                    CalculateUtilities`GraphicsUtilities`Private`more$$, {
                    False, True}, ControlType -> None}, {{
                    CalculateUtilities`GraphicsUtilities`Private`min3307$$, \
-0.5, "min"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 1}, {{
                    CalculateUtilities`GraphicsUtilities`Private`max3308$$, 
                    0.5, "max"}, -1, 1, ImageSize -> Tiny, ControlPlacement -> 
                    2}, 
                    Style[
                    Overlay[{
                    Dynamic[
                    RawBoxes[
                    FEPrivate`FrontEndResource[
                    "WABitmaps", "PodInfoBackground"]]], 
                    Pane[
                    Column[{
                    Grid[{{
                    Manipulate`Place[1], 
                    Manipulate`Place[2]}}]}], 
                    ImageMargins -> {{20, 30}, {10, 10}}]}, {1, 2}, 2, 
                    Alignment -> {Left, Top}]]}, 
                  "Options" :> {
                   TrackedSymbols -> True, ControlPlacement -> Bottom, 
                    FrameMargins -> {{0, 0}, {0, 10}}, Paneled -> False, 
                    AppearanceElements -> {}, 
                    LabelStyle -> {
                    "DialogStyle", FontColor -> GrayLevel[0.25]}}, 
                  "DefaultOptions" :> {}], SingleEvaluation -> True], 
                Initialization :> ({
                   ReleaseHold[
                    Hold[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`res, 
                    CalculateUtilities`GraphicsUtilities`Private`unitformat}, 
                    CalculateUtilities`GraphicsUtilities`Private`res = 
                    ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    Replace[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, Global`UnitNumberForm, 
                    NumberForm] -> (#& )], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, {
                    PatternTest[
                    BlankSequence[], NumberQ]}] :> 
                    Thread[{CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`t}]], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; If[
                    MatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Condition[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`quants, {
                    Alternatives[
                    BlankSequence[Global`ShortQuantity], 
                    BlankSequence[Quantity]]}], Length[
                    Union[
                    Map[
                    Global`UnitObjectPart, 
                    CalculateUtilities`GraphicsUtilities`Private`quants]]] == 
                    1]], CalculateUtilities`GraphicsUtilities`Private`\
unitformat = Global`ToCDFQuantityFunction[
                    Part[CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
unitformat -> Thread[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 1], 
                    Global`QuantityPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, All, 2], 
                    Global`UnitObjectPart[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`res, 1, 
                    2]]]}], 
                    CalculateUtilities`GraphicsUtilities`Private`res]]; 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`post$2874215]\
 = {"ReturnInteractiveTypes" -> False, "Nearest" -> Automatic}; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2874215[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[Graphics]], 
                    OptionsPattern[]] := Check[
                    
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`lines, 
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    CalculateUtilities`GraphicsUtilities`Private`gg, 
                    CalculateUtilities`GraphicsUtilities`Private`type, 
                    CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    CalculateUtilities`GraphicsUtilities`Private`range, 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,
                     CalculateUtilities`GraphicsUtilities`Private`\
neareststyle = OptionValue["Nearest"]}, 
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog = 
                    Replace[
                    ReplaceAll[Epilog, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Epilog -> Sequence[]]; Switch[
                    ReplaceAll[{Frame, Axes}, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]], {True, 
                    Blank[]}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Frame; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    ReplaceAll[FrameTicks, 
                    Options[
                    CalculateUtilities`GraphicsUtilities`Private`g]]], {
                    Blank[], True}, 
                    CalculateUtilities`GraphicsUtilities`Private`type = 
                    Axes; {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l} = 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    ReplaceAll[Ticks, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]], 
                    Blank[], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    And[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    Frame, 
                    Or[
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`t === None, 
                    CalculateUtilities`GraphicsUtilities`Private`b === 
                    CalculateUtilities`GraphicsUtilities`Private`t]], 
                    Not[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`r === None, 
                    CalculateUtilities`GraphicsUtilities`Private`l === 
                    CalculateUtilities`GraphicsUtilities`Private`r]]]], 
                    CalculateUtilities`GraphicsUtilities`Private`type = None]; 
                    If[
                    TrueQ[
                    OptionValue["ReturnInteractiveTypes"]], 
                    Which[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], {}, 
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], {}, True, {
                    "Tooltips", "Coordinates"}], If[
                    FreeQ[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Alternatives[Line, Point]], 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gg = 
                    Normal[CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = 
                    Partition[
                    Flatten[
                    Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    Point[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    Infinity]], 2]; 
                    If[Length[
                    CalculateUtilities`GraphicsUtilities`Private`pts] < 2, 
                    CalculateUtilities`GraphicsUtilities`Private`lines = Cases[
                    Part[CalculateUtilities`GraphicsUtilities`Private`gg, 1], 
                    
                    Blank[Line], Infinity]; 
                    If[CalculateUtilities`GraphicsUtilities`Private`lines === \
{}, 
                    Return[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`pts = Flatten[
                    Cases[
                    CalculateUtilities`GraphicsUtilities`Private`lines, Line[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`a, Infinity],
                     1]; If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, If[
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[
                    CalculateUtilities`GraphicsUtilities`Private`lines], 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "1D", 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]; Null], 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle === 
                    Automatic, 
                    CalculateUtilities`GraphicsUtilities`Private`neareststyle = 
                    "2D"]]; 
                    CalculateUtilities`GraphicsUtilities`Private`range = 
                    Replace[
                    ReplaceAll[PlotRange, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]], 
                    Except[{{
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}, {
                    PatternTest[
                    Blank[], NumberQ], 
                    PatternTest[
                    Blank[], NumberQ]}}] :> {
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]], 
                    Through[
                    {Min, Max}[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]]}]; CalculateUtilities`GraphicsUtilities`Private`b = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`b, 
                    First[CalculateUtilities`GraphicsUtilities`Private`range], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    1]]; CalculateUtilities`GraphicsUtilities`Private`l = 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 
                    2]]; CalculateUtilities`GraphicsUtilities`Private`\
oldgridlines = ReplaceAll[GridLines, 
                    Options[CalculateUtilities`GraphicsUtilities`Private`g]]; 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines = 
                    With[{CalculateUtilities`GraphicsUtilities`Private`gray = 
                    GrayLevel[0.7]}, 
                    Replace[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines,\
 {Pattern[CalculateUtilities`GraphicsUtilities`Private`a, {
                    Blank[List], 
                    Blank[List]}] :> Dynamic[
                    Join[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]], {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Blank[List]], Automatic} :> 
                    With[{CalculateUtilities`GraphicsUtilities`Private`\
divisions = {CalculateUtilities`GraphicsUtilities`Private`a, 
                    FindDivisions[
                    Last[CalculateUtilities`GraphicsUtilities`Private`range], 
                    7]}}, 
                    Dynamic[
                    Join[
                    CalculateUtilities`GraphicsUtilities`Private`divisions, 
                    Replace[
                    MousePosition[{"Graphics", Graphics}, None], {
                    None -> {{}, {}}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`x, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`y, 
                    Blank[]]} :> {{{
                    CalculateUtilities`GraphicsUtilities`Private`x, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}, {{
                    CalculateUtilities`GraphicsUtilities`Private`y, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}}}], 
                    2]]], Blank[] -> Dynamic[
                    
                    Map[{{#, 
                    CalculateUtilities`GraphicsUtilities`Private`gray}}& , 
                    MousePosition[{"Graphics", Graphics}, None]]]}]]; If[
                    Or[
                    CalculateUtilities`GraphicsUtilities`Private`type === 
                    None, CalculateUtilities`GraphicsUtilities`Private`b === 
                    None, CalculateUtilities`GraphicsUtilities`Private`l === 
                    None], 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    If[CalculateUtilities`GraphicsUtilities`Private`\
neareststyle === "1D", 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Part[
                    CalculateUtilities`GraphicsUtilities`Private`pts, All, 1] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts]}, 
                    CalculateUtilities`GraphicsUtilities`Private`n[
                    Part[#, 1]]& ], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`n = 
                    Nearest[Transpose[Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`pts]/Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]] -> 
                    CalculateUtilities`GraphicsUtilities`Private`pts], 
                    CalculateUtilities`GraphicsUtilities`Private`scale = Abs[
                    Apply[
                    Subtract, 
                    CalculateUtilities`GraphicsUtilities`Private`range, {
                    1}]]}, CalculateUtilities`GraphicsUtilities`Private`n[#/
                    CalculateUtilities`GraphicsUtilities`Private`scale]& ]], 
                    CalculateUtilities`GraphicsUtilities`Private`left = 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`bottom = 
                    CalculateUtilities`GraphicsUtilities`Private`b}, 
                    Show[
                    CalculateUtilities`GraphicsUtilities`Private`g, GridLines -> 
                    CalculateUtilities`GraphicsUtilities`Private`gridlines, 
                    If[
                    MatchQ[
                    CalculateUtilities`GraphicsUtilities`Private`oldgridlines, 
                    Alternatives[None, GridLines]], 
                    Method -> {"GridLinesInFront" -> True}, 
                    Apply[Sequence, {}]], 
                    Epilog -> {
                    CalculateUtilities`GraphicsUtilities`Private`oldepilog, 
                    Dynamic[
                    
                    DynamicModule[{
                    CalculateUtilities`GraphicsUtilities`Private`pt = 
                    CalculateUtilities`GraphicsUtilities`Private`nf[
                    MousePosition[{"Graphics", Graphics}, {0, 0}]], 
                    CalculateUtilities`GraphicsUtilities`Private`scaled = 
                    MousePosition[{"GraphicsScaled", Graphics}, None]}, 
                    If[
                    CalculateUtilities`GraphicsUtilities`Private`scaled === 
                    None, {}, {
                    Text[
                    Style[
                    Row[{
                    CalculateUtilities`GraphicsUtilities`Private`bottom[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 1]], 
                    CalculateUtilities`GraphicsUtilities`Private`left[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1, 2]]}, 
                    ","], 12], 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`pt, 1], {
                    1.5 Sign[Part[
                    CalculateUtilities`GraphicsUtilities`Private`scaled, 1] - 
                    0.5], 0}, Background -> White], 
                    AbsolutePointSize[7], 
                    Point[CalculateUtilities`GraphicsUtilities`Private`pt], 
                    White, 
                    AbsolutePointSize[5], 
                    Point[
                    CalculateUtilities`GraphicsUtilities`Private`pt]}]]]}]]]]]\
, CalculateUtilities`GraphicsUtilities`Private`g]; 
                    CalculateUtilities`GraphicsUtilities`Private`post$2874215[
                    
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`g, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`g; 
                    CalculateUtilities`GraphicsUtilities`Private`orderedLines[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    BlankSequence[Line]]}] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`ordered, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals}, 
                    CalculateUtilities`GraphicsUtilities`Private`ordered = 
                    Apply[And, 
                    Map[OrderedQ[
                    Part[#, 1, All, 1]]& , 
                    Hold[CalculateUtilities`GraphicsUtilities`Private`l]]]; If[
                    Not[
                    TrueQ[
                    CalculateUtilities`GraphicsUtilities`Private`ordered]], 
                    Return[False]]; 
                    CalculateUtilities`GraphicsUtilities`Private`intervals = 
                    Part[{CalculateUtilities`GraphicsUtilities`Private`l}, 
                    All, 1, {1, -1}, 1]; Length[
                    Apply[
                    Interval, 
                    CalculateUtilities`GraphicsUtilities`Private`intervals]] === 
                    Length[CalculateUtilities`GraphicsUtilities`Private`\
intervals]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Alternatives[Automatic, FrameTicks]] = {
                    Identity, Identity, Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, {{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`l, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`r, 
                    Blank[]]}, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`t, 
                    Blank[]]}}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`b, 
                    CalculateUtilities`GraphicsUtilities`Private`l, 
                    CalculateUtilities`GraphicsUtilities`Private`t, 
                    CalculateUtilities`GraphicsUtilities`Private`r}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Frame, 
                    Blank[]] = {None, None, None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Alternatives[Automatic, Ticks]] = {Identity, Identity}; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, {
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`h, 
                    Blank[]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`v, 
                    Blank[]]}] := 
                    Map[CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction, {CalculateUtilities`GraphicsUtilities`Private`h, 
                    CalculateUtilities`GraphicsUtilities`Private`v}]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
ScaleCoordinatesToTicks[Axes, 
                    Blank[]] = {None, None}; 
                    CalculateUtilities`GraphicsUtilities`Private`CDFCleanTicks[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := ReplaceAll[
                    ReplaceAll[
                    Part[
                    DeleteCases[
                    ReplaceAll[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Alternatives[Style, NumberForm] -> (#& )], {
                    Blank[], "", 
                    BlankNullSequence[]}], All, 
                    Span[1, 2]], Superscript[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`b, 
                    Blank[Integer]], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`p, 
                    Blank[Integer]]] :> 
                    CalculateUtilities`GraphicsUtilities`Private`b^
                    CalculateUtilities`GraphicsUtilities`Private`p], Row[{
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`a, 
                    BlankSequence[]]}, "\[Times]"] :> 
                    Times[CalculateUtilities`GraphicsUtilities`Private`a]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$, 
                    Blank[]]] := 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    CalculateUtilities`GraphicsUtilities`Private`WACleanTicks[
                    CalculateUtilities`GraphicsUtilities`Private`ticks$]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[None] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[False] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[True] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[Automatic] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
TicksToFunction[All] = Identity; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[Pattern[CalculateUtilities`GraphicsUtilities`Private`func, 
                    Blank[]] -> 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    Blank[]]] := Replace[
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[CalculateUtilities`GraphicsUtilities`Private`ticks], 
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`f, 
                    Except[None]] :> 
                    Composition[
                    CalculateUtilities`GraphicsUtilities`Private`func, 
                    CalculateUtilities`GraphicsUtilities`Private`f]]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[{}] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    Blank[Integer], 
                    Blank[String]}]}]] := Which[
                    Quiet[
                    MatchQ[
                    Apply[SameQ, 
                    Map[Part[
                    DateList[#], 
                    Span[2, All]]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    2}], {1}], {
                    Repeated[True]}]], DateString, 
                    Apply[And, 
                    StringMatchQ[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2], NumberString]], 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Transpose[{
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    1], 
                    ToExpression[
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, All, 
                    2]]}]], True, None]; 
                    
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {
                    Repeated[{
                    PatternTest[
                    Blank[], NumericQ], 
                    PatternTest[
                    Blank[], NumericQ]}]}]] := Which[
                    MatchQ[
                    Apply[
                    Equal, CalculateUtilities`GraphicsUtilities`Private`ticks,\
 {1}], {
                    Repeated[True]}], Identity, 
                    MatchQ[
                    
                    Apply[# == Log[#2]& , 
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {1}], {
                    Repeated[True]}], Exp, 
                    TrueQ[
                    Quiet[
                    Apply[Equal, 
                    Apply[Divide, Transpose[
                    Rest[CalculateUtilities`GraphicsUtilities`Private`ticks]] - 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1]]]]], 
                    
                    With[{CalculateUtilities`GraphicsUtilities`Private`slope = 
                    Apply[Divide, 
                    Apply[Subtract, 
                    Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, {-1, 
                    1}]]]}, 
                    SetPrecision[(# - Part[
                    CalculateUtilities`GraphicsUtilities`Private`ticks, 1, 
                    1])/CalculateUtilities`GraphicsUtilities`Private`slope + 
                    Part[CalculateUtilities`GraphicsUtilities`Private`ticks, 
                    1, 2], 3]& ], True, None]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
iTicksToFunction[
                    Blank[]] = None; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`type, 
                    Blank[]], 
                    BlankNullSequence[]] := 
                    CalculateUtilities`GraphicsUtilities`Private`type; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Identity, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`nf = 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm, 
                    CalculateUtilities`GraphicsUtilities`Private`acc = 
                    Floor[Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3] - RealExponent[
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]]]}, 
                    CalculateUtilities`GraphicsUtilities`Private`nf[#, 
                    CalculateUtilities`GraphicsUtilities`Private`acc]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[Exp, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Blank[]] := 
                    With[{CalculateUtilities`GraphicsUtilities`Private`prec = 
                    Max[
                    Ceiling[
                    FullSimplify[Log[10, 
                    Max[
                    
                    Abs[{CalculateUtilities`GraphicsUtilities`Private`min, 
                    CalculateUtilities`GraphicsUtilities`Private`max}]]] - 
                    Log[10, (CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/100]]], 
                    3]}, Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[
                    Exp[#], 
                    CalculateUtilities`GraphicsUtilities`Private`prec]]]]& ]; 
                    CalculateUtilities`GraphicsUtilities`Private`\
RefineCoordinateFunction[DateString, {
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`min, 
                    Blank[]], 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`max, 
                    Blank[]]}, 
                    Pattern[
                    CalculateUtilities`GraphicsUtilities`Private`pts, 
                    Blank[]]] := 
                    Module[{
                    CalculateUtilities`GraphicsUtilities`Private`dates, 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    CalculateUtilities`GraphicsUtilities`Private`dates = 
                    Map[DateList, 
                    CalculateUtilities`GraphicsUtilities`Private`pts]; 
                    CalculateUtilities`GraphicsUtilities`Private`spec = Switch[
                    Map[Length, 
                    Map[Union, 
                    Transpose[
                    CalculateUtilities`GraphicsUtilities`Private`dates]]], {
                    Blank[], 1, 1, 
                    BlankSequence[]}, {"Year"}, {
                    Blank[], 
                    Blank[], 1, 
                    BlankSequence[]}, {"MonthNameShort", " ", "Year"}, 
                    Blank[], {
                    "DayShort", " ", "MonthNameShort", " ", "Year"}]; 
                    If[(CalculateUtilities`GraphicsUtilities`Private`max - 
                    CalculateUtilities`GraphicsUtilities`Private`min)/
                    31536000 > 25, 
                    CalculateUtilities`GraphicsUtilities`Private`spec = {
                    "Year"}]; 
                    With[{CalculateUtilities`GraphicsUtilities`Private`s = 
                    CalculateUtilities`GraphicsUtilities`Private`spec}, 
                    DateString[#, 
                    CalculateUtilities`GraphicsUtilities`Private`s]& ]]; 
                    CalculateUtilities`GraphicsUtilities`Private`numberForm = 
                    Function[{
                    CalculateUtilities`GraphicsUtilities`Private`a, 
                    CalculateUtilities`GraphicsUtilities`Private`acc}, 
                    Quiet[
                    RawBoxes[
                    ToBoxes[
                    NumberForm[CalculateUtilities`GraphicsUtilities`Private`a, 
                    Max[1, 
                    Ceiling[
                    RealExponent[
                    CalculateUtilities`GraphicsUtilities`Private`a] + 
                    CalculateUtilities`GraphicsUtilities`Private`acc]], 
                    ExponentFunction -> (Null& ), 
                    NumberFormat -> (StringReplace[#, StringExpression[
                    Pattern[CalculateUtilities`GraphicsUtilities`Private`s, 
                    BlankSequence[]], ".", EndOfString] -> 
                    CalculateUtilities`GraphicsUtilities`Private`s]& )]]]]]]], 
                   ReleaseHold[
                    Uncompress[
                    "1:eJztVm1v0zAQbikw3t/+ARKfkSiV4AsSrGNj0oCSlO+\
9JU5i4drBdrbBnwef3STN2lWK6QBN6YdTfWke3z333PWeHosg6fd6PXXdmA+\
CxckOnp4YMxbzXBQ8fn+WS6IUFTy5hs/uGBMSvUcY/CCx8900Zl/\
IOWh3foPvA4sKBpp81ZRRTYmaHUjIMxqp2jOR9MT8ZMZEBIz+JM+Gr1+\
NhsORg8FYJqA1kVy9bAuZZxIUSXoIdMOYXQb8mzs+Lo+fCsZC8r0gPCLqofFOJcQGRnBgmI/\
3rVebqXuYmAYeg4wvnSYrz3HbC5SWlKdTMs/\
xjYvJetEWGGSqHDf3S242KciFfwsfiNDG5Dw2aXu2BPqFccXoOy+\
rf87dAM9v28JLcbqeOMzvHUPeQNMTolbpfN66To6Rqmtt9AuuLmu+bDXIi6dM/\
b90RJVeDWPYNgwyPzY1Xq+9VfhRW3iRY9cvxP3AmM/\
OUQKuGw6V4D6KuGCLKJopD5xE26ercuNwGHcrvkN0+lSwwglMnGW/\
2P54VIHXm0KItZttQTq8ngEByYlxxZbbPZpSPc5AQmSAF9f1yyabijoUjzvb157ymJoB5gjZtDyhOU\
yW6g46yr78UXEruZxrMuT9kGuSErlR9LexPtKQy+\
Op8IwkxAuaevXmsEpqAtJb9oMSJMyBU4Skv8zHfnMPlyuBVB1IVJd0LA5sac78k+\
iXBT4iPNVZc8f2HF3ebYvZBOK0Vl1Ak2R52myP6X6T6cYNzYHuS4JvSfwHercpdJvCX90UVvbgbk3o\
1oRuTejWhG5N+H/XBBsx/iv9BtjjuIY="]]}; Typeset`initDone$$ = True), 
                DynamicModuleValues :> {}, Deinitialization :> None, 
                UntrackedVariables :> {Typeset`size$$}, 
                SynchronousInitialization -> True, 
                UnsavedVariables :> {Typeset`initDone$$}], "Manipulate", 
               Deployed -> True, StripOnInput -> False], TraditionalForm], 
             Manipulate`InterpretManipulate[1]], TraditionalForm]], 
          "Output", {}]}], 
       XMLElement["dataformats", {}, {"minput"}]}]}], Typeset`aux1$$ = {
   True, False, {False}, True}, Typeset`aux2$$ = {
   True, False, {False, False}, True}, Typeset`asyncpods$$ = {}, 
   Typeset`nonpods$$ = {}, Typeset`initdone$$ = True, Typeset`queryinfo$$ = {
   "success" -> "true", "error" -> "false", "numpods" -> "2", "datatypes" -> 
    "Plot", "timedout" -> "", "timedoutpods" -> "", "timing" -> "2.123", 
    "parsetiming" -> "0.76", "parsetimedout" -> "false", "recalculate" -> "", 
    "id" -> "MSPa15081df0f47ggge5011e00003c45eg6f3hc8da1f", "host" -> 
    "http://www3.wolframalpha.com", "server" -> "13", "related" -> 
    "http://www3.wolframalpha.com/api/v2/relatedQueries.jsp?id=\
MSPa15091df0f47ggge5011e00002328i7fchg5e67e9&s=13", "version" -> "2.6"}, 
   Typeset`sessioninfo$$ = {
   "TimeZone" -> -4., 
    "Date" -> {2014, 8, 4, 21, 7, 38.973298`8.343342137028301}, "Line" -> 31, 
    "SessionID" -> -3290945082401518144}, Typeset`showpods$$ = {1, 2}, 
   Typeset`failedpods$$ = {}, Typeset`chosen$$ = {
   "Plot", "Plots", 1, 2, "Input", 
    "Plot[Cos[20 Pi t]/E^(10 t), {t, -0.2, 0.2}]"}, Typeset`open$$ = False, 
   Typeset`newq$$ = "graph E^(-10 t) Cos[2 \[Pi] 10 t]"}, 
   DynamicBox[ToBoxes[
     AlphaIntegration`FormatAlphaResults[
      Dynamic[{
       1, {Typeset`pod1$$, Typeset`pod2$$}, {Typeset`aux1$$, Typeset`aux2$$}, 
        Typeset`chosen$$, Typeset`open$$, Typeset`elements$$, Typeset`q$$, 
        Typeset`opts$$, Typeset`nonpods$$, Typeset`queryinfo$$, 
        Typeset`sessioninfo$$, Typeset`showpods$$, Typeset`failedpods$$, 
        Typeset`newq$$}]], StandardForm],
    ImageSizeCache->{359., {48., 17.}},
    TrackedSymbols:>{Typeset`showpods$$, Typeset`failedpods$$}],
   DynamicModuleValues:>{},
   Initialization:>If[
     Not[Typeset`initdone$$], Null; 
     WolframAlphaClient`Private`doAsyncUpdates[
       Hold[{Typeset`pod1$$, Typeset`pod2$$}], Typeset`asyncpods$$, 
       Dynamic[Typeset`failedpods$$]]; Typeset`asyncpods$$ = {}; 
     Typeset`initdone$$ = True],
   SynchronousInitialization->False],
  BaseStyle->{Deployed -> True},
  DeleteWithContents->True,
  Editable->False,
  SelectWithContents->True]], "WolframAlphaShortInput",ExpressionUUID->\
"f3bfca07-cfa8-4cfd-90f7-bc0e9e76a81b"],

Cell[BoxData[
 GraphicsBox[{{{{}, {}, 
     TagBox[{
       {RGBColor[0.368417, 0.506779, 0.709798], AbsoluteThickness[1.6], 
        Opacity[1.], LineBox[CompressedData["
1:eJwVl3c81d8fx5WdCCUyGkKorCI03lelNJQKRZJV5ItCA0lIiEQlSfbee6/3
HbZLsrPCtbJFVuJ3f3/dx/Nxzuf1fr/PeZ1z32efycPr9zYzMDBsZWJg+P/v
flGinlVLNZa/5Nu7x4Wb8Kz34bS5WzUatvyUlZxgJ1w6ItG77FyFy0xX1+I5
muDRE+mAvw5VWOvWVUE2rYOgApkz64+rMDhiNNIgpwL6jx9LYrSuwsM7yn9H
FWbD47MaT7juVOFgokLG7mvFGKpjySl2sgonsvfe3F7eg9PP0k9e/VeJ14Ub
NLBzDrcXZ89eW6lE2By7f/rFb1Rey4/R/lOJ572FvKxF59HdFdn1pyrxLrHC
W+fBAvK/aWoz661EdX0qBkwvIiHkt7VTWSWqfMusnm/9i+9LlcLjXlRiYL9/
vJj7ZmLgiBjpmmMl0kh7JWsbNhODuLcP/XtciYV/T2fRBBiJIWYzUrpW9Hg3
p4afpjESo7cm5rHcrsQUO/ne1W9MxFyDXQ3mypUYIf85O2WFhZjvyTq7/Wgl
bgtSzSScYCUWZv7hJcpWYnb2V72TLqzEUqbmWwIHKlFWNtvHkoGNWJnqM1TD
V4ksXB3CL/+xEdvX/v6Vmq/AZ4n3g+d+bCF2Sozvbp+uwIE/S11JvBzELq1O
NffxChxRTcwvv8hB7IvN9eoaqMCxCb9ffws5iKOXrbf7NlXgtUDduly/rcTx
p7eVjlEr0GeH9qXTpK3EycgLerTqClzCVWHJha3E2QXxiONYgendjQ2rNzmJ
y6F90pNpFSj3RXcwg5+LuFpF1QxOqsA38X2a8+pcxLXZ4kdn4yrQytU02Nee
i8ig/jk/NLQCS+6cvFZE5SKyT109relbgT1elmUbT7cRBU+S9NIt6OPmJ+89
1+EmmgQk/hdrVoHjt1sCme9zE5Np/i9CjCpwmeqle+YpN/G4j2GU560KPPWt
/PKPT9xEg46/Y4YaFXideb+t9XduYqw0bVX7bAV+vJ/y6cNPbuLUi7qtlwgV
qJL6bNhyipvoIvZF7phyBVaGDowfZeMhRtgqOWyTrMDV0GROGVUe4liFiA+z
WAX+nTdmmlTnIcoJMIf+3VOBV1zFuO5c4yESy1twlL8Cu7mL790y5yGy8ZZ8
791egUdamUsHbXmI1+5F01q2VaBU3GWlvc48xEEOW1YiawV2LdNyc/15iNJ3
b+3KZ6xA3y8q9RxfeIh22XAwdYOCZSUfpHZG8xAZ9biuBi9RUIlHf+ZsDg9R
LD4l6NEoBZ0mDilvbeYhWq18SLxPo2DdTfU9G508xNzLTsUGPyno2tHSGPeT
h6g+r9Gn0UFB97E3vVyTPMR35+RmT7XQ5z9ItPw+x0Ns/8K/WfEbBUm5ksIa
SzzE+4QR8X3VFNRJLdC+vomXmP6x4Rg/hYJfb9XzjjDzEpdGci9wIgVPvtYw
ldnCSySoht5mLKGgCfMLs4NcvERvv1fWK/kUPJTdrNjLw0ts6rd8OZNNwVMq
jUtn+HiJAkevvx9Op+DnUU7qXQFeopGXSkx3MgWrHmm0yQnxEpO69uZ9j6eg
dfalYwUivMTfh9mqq6MpqPL47875PbxEVbeZzrJwCh4T0woZ2sdLdG9tH88J
oWCEv86Y735eYt2B8rWkIAruD5aS+iXGS+R9HscV+YGCqcOrr9fEeYm3G9/u
DXpHwdxAVqkqCV5i7L7HCm99KCg68PXkuQO8xMnHt8+6e9LzaeCedabz0ZrT
ug7uFLSqqbO2pLOzkLSFjQsFwy8qD3PRucKGx8nMiYLbnzW9tqTrcZKXffWf
UvB7Do/rC3o8Xb7+MC07CnKquTJr0PMJt6jOOGdDwTZqrEadKC9xpCSddMKS
gm6MHC+Y6PXIbAtqUbhPwc0ihI7F3bxE7YvmOs3GFJzPab9sJcxLdHyt3GF7
h4KHKZk0v110PSK7Ho8efZwSN3h7Jz2fv11dmdoU9Jwcfd/Oy0v8pZRqoKVF
Qa7pTcfX6fvDZfeib+YSBYvSWiVb6PunN7ZnUOYMBTMVa5k86fvtsn/OtPEU
BcW3nvc3W+MhxhqSh61V6fVzyX+eW+QhTrea/UqVpyDb0XP3BSZ4iDu4lf67
fJiCCbH7WrOHeIgql1inJiQpKMFeufVfLw/Rg5Q0K72XgrWyESrR33iISWtO
dnVCFPS95df3r5qH2Hjs8sIDfgoOaKZlbCHyEHelTy8lclGwo+KuukoGDzE9
5MiGxD8yigp4vVl4w0NsbWNyq1om4/dEi2baSx7iCnf75vsLZOTL+HvG6wkP
8ayXA0vcBBmLQm0UJ+/yEH/Yl3Hu7yKj0nb7MBV5HuJ6+jt/chsZRcyrH7aJ
0c/T+F0ek+9kNHKiZUgK8BBtjDbzRdWQ0fWpqdzSP24ik+Z54T0FZHzhX2RF
qOImSnkLhJdnkzFRYUd/TAE38Qrl1x7DdDJyL3peICdyE7+ovN0fFkfGHzMR
bfI+3EQZie/SQoFknOOvHR27wE3UNo5OLfYn422KqqC8CjfRMdReRt+XjC3t
RDZlSW5iBe9OhS/uZJz3F+LyYOYm6m3oq/DbktH8hfUhdadtRI/OofPbr5Cx
5P127XY1LuIz5w3l6gtkPGWk3/tsFxfRcq+g9HN1MnIandVNmeUkallc3Uo7
QcaPxzckqGGcRJHloqbsg2Q8v260wjO/lZjP7693nZ2MzGR92mcfDuKYrsp/
7ytIKJZifmrbEzZi9+oNA3UiCVlkBc/8JbARG8NtNFdKSFgqZZLzdSsbMXck
RtY4h4TVLjYG69GsRLenXAty0SSkqkp/tqSyEAWDaM5NL0noJcvypI+XmXi5
ze/dtuMkDO/I4jj7dBPxdXSUDecxEt5IOhM4f2oTsfxh3hWOIyQ8auV80411
E1F+Sy8X60ESemh+vHY8mIG4Ew75rwuScOv3ou+ejzawP7HOf2qViI9oD2In
R/7iE2fW9/XFRFwfXZL8UbSA4fvdPnqpErFrRKi799kPzO10ockoETH5vPRp
d78OrPNzPtIuT8QdNSceM8e24dLSsxYxKSIyzVg51rZ8Ry2qzXYyPxFl/N0V
7rhUIMt4ocTKL0SN0muHNjVmQ9PbhxI0Q0TxlbenVSv6YW3RskpeF1GGcka9
JWYApIzv33fVRJS0dLdwdx8Ed8U78SInEMkt/Xp8J4dAse+ixK1diJ4VW4wy
4kchRFZCoqGlHJ/sYhNr15iGe8094gUa5Xg92CO/SO8P7Pavi/lCoLPsl56v
WX+g/VLhPmflcmyZZlGdZlsEjcqPImqS5Rj9jv3lz7xFOFR4ka+etRxLZMV2
dLItw0JYIdPPqjJ8n+N/8eKHVUjTj3cnlZehxrwNtbh/Fe7zBzLE5peh3+LU
o7cyf6Ez4OGaRXwZnqLFVl2t+QulryQWfr8uw01Wm1tgYQ08HgTSWNTL0IbW
u3nX4Q04KeFu/OtEGRLZDE1P2m7A4uDDn/VHy3Ce9LI/P3cDLAwudQeIleHT
Y9xXWoQZCJevbm4RZCrDqtabPTlhDITtio/IMpRSTCpb/bX0bhOBOneHwFNS
iqmuMr7+KZsIHumXyuezS/FZfeP5hupNhMUDB4oLo0sxSj/xsOrGJkKXYF/W
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
n21qPxMh9lRmL36lIf+5frWI2UTY9O1CQXIwDc+K1Nv/25QEu22ZXE98ouGj
hby429uToCv7sMeT93T/1Ed2FIklAaeeM4+uHw3ron3ZBZSS4Nomrmd93jRc
dHx6/On5JPhZbsa8zYOGWpKXIxQsk4AWdm34gSMNX2wofQ94ngTfbKl9gfY0
TG7fxzjzNgn2dTZpPbCm++n10v2UjCSwLxb6t+3/fjIYDGYnJYFJOdv44C26
n4401Jk3J4HCrepco2t0/wxEy4j9SYLGSvubhmp0f5y6shiqmgyhgiFnrETo
/uBTkfx7KRnKM6a9IrfT/TG5X1/vTjL8ZYzLdmen++HrShmfazJ0VErdvL4w
iE1Lsa/fVSbDnzNvTKWrBvFfo3/BZHsyaP04qfejaBCl451+XRxLhi07pd6q
pA3iK20tTVaOFLhwVfi/bR/p5zXr7w5XrRSw81ENErk9iBdpm3zzjVJgs+9/
u4w0B9GQj23T1KMUeNh+SNgYBtHTcceU3vsUmLnZLhUpOogdaocrjzSngEhM
7g2RkQF0aDZ8MnojFU4d66yzNh7At0z3JkTMUiGkhG2x+uoARir9Z6z9OBV0
zvqIjJ4cwNqQZ5qkwFTYzWe46+muARQ0DRD/2pYKZwyiZgYb+rFkntR25WYa
sGtWON0+1I9N4jWXXpungXmp1RlV/n4cutlIKnmWBipcJ2WHN/Xj1tKuNMng
NBjknP96Ou0nGnjMv978Iw3sk38lvPzbh+s7xJXy9dNhVKZuZpNnLxKUvINE
DDPA5Yp3EKN+F4pUWlzdbJMBmtMUlwLxLly9cYFt9EUG3IzPXxKf+4G5tluc
MsMyoLjr83Mlrx8omfb2zpneDBA4tL5JLbMT2T5ofDgqkwl3FWRX2xfbcZZN
U08/LROkznDmTxq0IHFRZzQuJQu23i/Xt/Ouxsc2v03Vc7Mghse5UXBzNUqN
vOsfKs2CJz67RXKfV+GHtuof+xuzwPmG5A6KTSWa5apQo2az4NrDo5+DtCnI
aieSFaaYDYa/1m4ZnS7HK1NDTp8wG+REeH6Vq6bg5ntuS0drsiH022zB6UNJ
WNAj8ri1KRs+OQpp5O1OwL1UXevtg9kwIKBb+4YlBueSa+6+Z8qBGdXgiOrK
TxhokXrW70IOpJy8sT0j0QO6afZcr1ty4LutcOMadzYwse9OC+jOgbIK94eS
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
Kcgs
         "]]}},
      Annotation[#, "Charting`Private`Tag$8734#1"]& ]}}, {}, {}},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{True, True},
  AxesLabel->{None, None},
  AxesOrigin->{0, 0},
  DisplayFunction->Identity,
  Frame->{{False, False}, {False, False}},
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}, {Automatic, 
     Charting`ScaledFrameTicks[{Identity, Identity}]}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  ImagePadding->All,
  Method->{
   "DefaultBoundaryStyle" -> Automatic, "DefaultMeshStyle" -> 
    AbsolutePointSize[6], "ScalingFunctions" -> None, 
    "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& ), "CopiedValueFunction" -> ({
        (Identity[#]& )[
         Part[#, 1]], 
        (Identity[#]& )[
         Part[#, 2]]}& )}},
  PlotRange->{{-0.2, 0.2}, {-4.538562537217734, 4.123165608703799}},
  PlotRangeClipping->True,
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.05], 
     Scaled[0.05]}},
  Ticks->{Automatic, Automatic}]], "Output",
 CellChangeTimes->{3.6161896591069803`*^9, 3.64822764938345*^9, 
  3.71179253018876*^9},ExpressionUUID->"b8719596-b602-47b8-bca4-3ab083fa7c75"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{1173, 1209},
WindowMargins->{{Automatic, 256}, {Automatic, 45}},
PrintingCopies->1,
PrintingPageRange->{1, Automatic},
PrintingOptions->{"PaperOrientation"->"Portrait",
"PaperSize"->{680, 880},
"PrintCellBrackets"->False,
"PrintMultipleHorizontalPages"->False,
"PrintRegistrationMarks"->False,
"PrintingMargins"->{{54., 54.}, {57.6, 57.6}}},
FrontEndVersion->"11.1 for Mac OS X x86 (32-bit, 64-bit Kernel) (March 16, \
2017)",
StyleDefinitions->"Default.nb"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[567, 22, 179, 4, 74, "Subtitle", "ExpressionUUID" -> \
"74128aec-34a5-4c21-a1f4-fa939d28216c"],
Cell[749, 28, 1647, 31, 299, "Subsubsection", "ExpressionUUID" -> \
"9a7f3a8d-38e6-405c-b4ba-19f6a6ae813a"],
Cell[CellGroupData[{
Cell[2421, 63, 212, 4, 36, "Subsection", "ExpressionUUID" -> \
"1b7366fb-3b8e-4427-a333-c7cc588a1b88"],
Cell[CellGroupData[{
Cell[2658, 71, 335, 6, 35, "Subsubsection", "ExpressionUUID" -> \
"83942b45-6a32-4e79-8e30-6f8180fd6de3",
 PageBreakAbove->Automatic],
Cell[2996, 79, 1352, 22, 106, "Text", "ExpressionUUID" -> \
"86a03abf-c975-4d63-b088-eea3117d65bf"]
}, Open  ]],
Cell[CellGroupData[{
Cell[4385, 106, 402, 7, 35, "Subsubsection", "ExpressionUUID" -> \
"eb61a623-c24f-4a6e-8776-3bc3b34474cb",
 PageBreakAbove->Automatic],
Cell[4790, 115, 1433, 23, 68, "Text", "ExpressionUUID" -> \
"980c9fa2-6df5-486f-b219-695db3d9d3e8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[6260, 143, 442, 7, 35, "Subsubsection", "ExpressionUUID" -> \
"60974eb8-e6b1-4521-a6cf-54a280fe258d",
 PageBreakAbove->Automatic],
Cell[6705, 152, 1256, 21, 68, "Text", "ExpressionUUID" -> \
"554d3e2f-d142-4b1e-bfdf-222f1d548584"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[8010, 179, 228, 4, 44, "Subsection", "ExpressionUUID" -> \
"ea5c33fa-b858-4605-8f22-49ddbe07c4c9",
 PageBreakAbove->True],
Cell[CellGroupData[{
Cell[8263, 187, 236, 4, 35, "Subsubsection", "ExpressionUUID" -> \
"581250af-cbd0-4679-876d-8841bb359be5"],
Cell[8502, 193, 516, 14, 49, "Text", "ExpressionUUID" -> \
"23c16bd9-7452-45db-8994-dbe8e52fe326"],
Cell[CellGroupData[{
Cell[9043, 211, 206, 5, 32, "Input", "ExpressionUUID" -> \
"a79d3243-fb3c-4a94-a7ed-0c10899ea4e3"],
Cell[9252, 218, 201, 4, 32, "Output", "ExpressionUUID" -> \
"f4a776fb-c951-4eb1-aa35-b24ada497a49"]
}, Open  ]],
Cell[9468, 225, 1276, 21, 87, "Text", "ExpressionUUID" -> \
"dc710651-f744-4370-a726-72156f3f3522"],
Cell[CellGroupData[{
Cell[10769, 250, 402, 8, 46, "Input", "ExpressionUUID" -> \
"083a87eb-b5dd-432c-b9ff-90a14da1f651"],
Cell[11174, 260, 243, 4, 32, "Output", "ExpressionUUID" -> \
"9eacf34b-7924-4328-8981-d9a59e7358dc"]
}, Open  ]],
Cell[11432, 267, 356, 7, 30, "Text", "ExpressionUUID" -> \
"b10bf299-a325-4b49-b7e0-0704fc646338"]
}, Open  ]],
Cell[CellGroupData[{
Cell[11825, 279, 266, 5, 35, "Subsubsection", "ExpressionUUID" -> \
"3dee31dd-ebba-435a-b0e8-66c26bf72dd2",
 PageBreakAbove->Automatic],
Cell[12094, 286, 1084, 20, 107, "Text", "ExpressionUUID" -> \
"449b468a-db0a-4b65-bfc5-980504b26644"],
Cell[13181, 308, 122, 2, 32, "Input", "ExpressionUUID" -> \
"b6176293-1a43-4671-8358-81948de03681"],
Cell[CellGroupData[{
Cell[13328, 314, 281, 9, 35, "Input", "ExpressionUUID" -> \
"a3e9b9d0-b93b-42f3-be56-2d7fd0356afd"],
Cell[13612, 325, 359, 9, 35, "Output", "ExpressionUUID" -> \
"5066165d-ab38-4aec-b4cb-58ac95984c09"]
}, Open  ]],
Cell[13986, 337, 309, 9, 35, "Input", "ExpressionUUID" -> \
"b8392e90-bb50-4cf1-b72f-35712aeaf82f"],
Cell[14298, 348, 122, 2, 32, "Input", "ExpressionUUID" -> \
"30c784c8-e176-4ca1-975e-539f881d680b"],
Cell[CellGroupData[{
Cell[14445, 354, 156, 4, 32, "Input", "ExpressionUUID" -> \
"1125cab7-3e4a-4138-89d0-ed4752eaf82c"],
Cell[14604, 360, 362, 9, 35, "Output", "ExpressionUUID" -> \
"df1d29e0-28c7-4a41-82f2-76e2aa8b824c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15003, 374, 187, 4, 32, "Input", "ExpressionUUID" -> \
"09125fc4-5e33-4529-9f69-ceecee2b7743"],
Cell[15193, 380, 362, 9, 35, "Output", "ExpressionUUID" -> \
"a434cdd0-0cca-45d8-9ee6-08447b139530"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[15616, 396, 142, 1, 44, "Subsection", "ExpressionUUID" -> \
"b0a8e659-d9d9-4832-8ee8-dd9e1a9266f7",
 PageBreakAbove->True],
Cell[15761, 399, 653, 13, 125, "Text", "ExpressionUUID" -> \
"2a06fb73-523f-4ecc-a8f1-66d988b9cfa4"],
Cell[CellGroupData[{
Cell[16439, 416, 958, 27, 54, "Input", "ExpressionUUID" -> \
"ca8c9620-acd3-4eea-869b-87ebfc618b82"],
Cell[17400, 445, 12922, 225, 173, "Output", "ExpressionUUID" -> \
"d1c25243-10df-4df1-8260-d2c02cd17e6d"]
}, Open  ]],
Cell[30337, 673, 873, 16, 68, "Text", "ExpressionUUID" -> \
"1b545798-eae7-4728-9d9c-1fa2a8c96765"],
Cell[CellGroupData[{
Cell[31235, 693, 494, 15, 35, "Input", "ExpressionUUID" -> \
"090b4306-aeec-44b8-85b4-338e47ebf49e"],
Cell[31732, 710, 980, 26, 142, "Output", "ExpressionUUID" -> \
"7ced0fa2-352a-459d-9efa-6fbd41e32ddc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32749, 741, 112, 1, 32, "Input", "ExpressionUUID" -> \
"ae67e60c-0a2e-4904-bb5e-f2b02afbf01e"],
Cell[32864, 744, 373, 9, 35, "Output", "ExpressionUUID" -> \
"591d477b-3446-4ac5-8949-802deba30e64"]
}, Open  ]],
Cell[CellGroupData[{
Cell[33274, 758, 416, 12, 32, "Input", "ExpressionUUID" -> \
"506a2d2b-1756-4998-b2b6-1ab530f8e05e"],
Cell[33693, 772, 4451, 84, 145, "Output", "ExpressionUUID" -> \
"93cd00ed-5f09-4e27-aadb-7eb9c4da8031"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[38193, 862, 146, 1, 44, "Subsection", "ExpressionUUID" -> \
"9bd508aa-1531-4a83-96fa-70347d84bc88",
 PageBreakAbove->True],
Cell[38342, 865, 480, 11, 125, "Text", "ExpressionUUID" -> \
"4c8c82a5-0cc5-4d8b-a944-4ed833712228"],
Cell[CellGroupData[{
Cell[38847, 880, 352, 11, 32, "Input", "ExpressionUUID" -> \
"b2bb4e4a-9a94-4e44-b739-61cb6eb90542"],
Cell[39202, 893, 296, 5, 32, "Output", "ExpressionUUID" -> \
"51579edf-6df0-46b2-a9b0-6a1abbc3dd47"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[39547, 904, 119, 2, 44, "Subsection", "ExpressionUUID" -> \
"e646a4f2-5e23-4b1a-87d6-c21a8c7079ac",
 PageBreakAbove->Automatic],
Cell[39669, 908, 1645, 48, 139, "Text", "ExpressionUUID" -> \
"adef2eee-67de-44c0-8da4-15e36483ca27"],
Cell[41317, 958, 375, 12, 35, "Input", "ExpressionUUID" -> \
"8214ea7a-c478-4274-a673-7a21113ed885"],
Cell[CellGroupData[{
Cell[41717, 974, 417, 11, 75, "Input", "ExpressionUUID" -> \
"f7350a5a-f483-4167-88ae-ef3f47a3606e"],
Cell[42137, 987, 269, 5, 32, "Output", "ExpressionUUID" -> \
"0557597b-fc13-4caf-8306-ea5c9d8787a4"],
Cell[42409, 994, 267, 5, 32, "Output", "ExpressionUUID" -> \
"56de3e07-0463-465c-a5bf-d7c7ffb42818"],
Cell[42679, 1001, 267, 5, 32, "Output", "ExpressionUUID" -> \
"e5e1f708-fb65-452e-a4a4-08f1e8475bb6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[42995, 1012, 144, 1, 44, "Subsection", "ExpressionUUID" -> \
"5c580a38-cc9d-4df3-b762-5fa1a9599ce8",
 PageBreakAbove->False],
Cell[43142, 1015, 2132, 66, 88, "Text", "ExpressionUUID" -> \
"11e87bf5-c5ab-4fd2-b167-d7108ff1ccec"],
Cell[CellGroupData[{
Cell[45299, 1085, 237, 7, 47, "Input", "ExpressionUUID" -> \
"1b7a1986-ea56-4525-822c-fc9910a1fe24"],
Cell[45539, 1094, 413, 11, 55, "Output", "ExpressionUUID" -> \
"1167b725-f55d-4eb9-aecb-4a172b1c8590"]
}, Open  ]],
Cell[CellGroupData[{
Cell[45989, 1110, 266, 7, 47, "Input", "ExpressionUUID" -> \
"7f7823b5-8b23-4867-a3a5-b3899a7c2ef2"],
Cell[46258, 1119, 294, 6, 49, "Output", "ExpressionUUID" -> \
"a2b0bd3f-e8df-4207-b03d-1e9f74b34c9c"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[46601, 1131, 85, 0, 44, "Subsection", "ExpressionUUID" -> \
"88eae994-2be9-4850-994c-567e30b9685c"],
Cell[46689, 1133, 173, 3, 30, "Text", "ExpressionUUID" -> \
"065b5f92-f99e-4dce-b237-341e9aa5b443"],
Cell[CellGroupData[{
Cell[46887, 1140, 171, 4, 32, "Input", "ExpressionUUID" -> \
"27f055ee-b51c-4162-baf6-2c42e7eab2a5"],
Cell[47061, 1146, 896, 24, 63, "Output", "ExpressionUUID" -> \
"c737643c-c514-45cc-92e0-85f5afa35495"]
}, Open  ]],
Cell[CellGroupData[{
Cell[47994, 1175, 106, 2, 32, "Input", "ExpressionUUID" -> \
"c2b349c7-2d8d-4b34-89db-794e9fb4a279"],
Cell[48103, 1179, 265, 5, 32, "Output", "ExpressionUUID" -> \
"185fb818-c399-4cff-bafb-251660591b0b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[48405, 1189, 124, 2, 32, "Input", "ExpressionUUID" -> \
"4aaa4a39-fbe9-4593-afe3-6bd9af38ed96"],
Cell[48532, 1193, 375, 7, 32, "Output", "ExpressionUUID" -> \
"88f7b92b-e035-4777-b00e-3c2dee8be201"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[48956, 1206, 192, 4, 44, "Subsection", "ExpressionUUID" -> \
"16f637f5-c943-405c-876d-a8e97633d17d",
 PageBreakAbove->Automatic],
Cell[49151, 1212, 1215, 27, 125, "Text", "ExpressionUUID" -> \
"bd7ec67a-8385-47d9-a8d5-f3a4676afa2d"],
Cell[CellGroupData[{
Cell[50391, 1243, 118, 1, 32, "Input", "ExpressionUUID" -> \
"40676074-f314-4e61-89c3-56b7feca72fe"],
Cell[50512, 1246, 3995, 83, 266, "Output", "ExpressionUUID" -> \
"2feef108-2c8b-4266-a68a-7f2e499e6764"]
}, Open  ]],
Cell[CellGroupData[{
Cell[54544, 1334, 1340, 36, 54, "Input", "ExpressionUUID" -> \
"4c29f835-a136-40bb-97e4-296fe814156f"],
Cell[55887, 1372, 10209, 182, 237, "Output", "ExpressionUUID" -> \
"70a7a1ac-67db-43c2-aa60-1a5212ecf933"]
}, Open  ]],
Cell[66111, 1557, 605, 12, 49, "Text", "ExpressionUUID" -> \
"03f64d77-a50f-4935-a805-e9a80b92e34a"],
Cell[CellGroupData[{
Cell[66741, 1573, 830, 22, 58, "Input", "ExpressionUUID" -> \
"9b17bfc9-457d-46e2-a0bc-6765b7d471bc"],
Cell[67574, 1597, 29105, 490, 212, "Output", "ExpressionUUID" -> \
"3e71cf79-cda3-4d31-b9a7-97fe13198d09"]
}, Open  ]],
Cell[CellGroupData[{
Cell[96716, 2092, 904, 23, 58, "Input", "ExpressionUUID" -> \
"744e060f-cc4f-4302-a250-1b4f2fb9c29f"],
Cell[97623, 2117, 35507, 594, 223, "Output", "ExpressionUUID" -> \
"4b9e350b-026c-4e36-89ac-d88e04649308"]
}, Open  ]],
Cell[CellGroupData[{
Cell[133167, 2716, 1057, 30, 58, "Input", "ExpressionUUID" -> \
"1b5a7546-28af-4b9f-8202-65536ebda18b"],
Cell[134227, 2748, 35479, 593, 228, "Output", "ExpressionUUID" -> \
"453b0ada-11dd-40d1-9cf4-435e867ef9f6"]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[169755, 3347, 185, 4, 44, "Subsection", "ExpressionUUID" -> \
"73b43ee7-5ad3-4a0c-8131-ea85a3983aa6",
 PageBreakAbove->True],
Cell[169943, 3353, 941, 20, 68, "Text", "ExpressionUUID" -> \
"7e3ef112-081e-4d5b-b707-4ed0175d6df3"],
Cell[CellGroupData[{
Cell[170909, 3377, 95842, 1839, 82, "WolframAlphaShortInput", \
"ExpressionUUID" -> "f3bfca07-cfa8-4cfd-90f7-bc0e9e76a81b"],
Cell[266754, 5218, 23163, 397, 237, "Output", "ExpressionUUID" -> \
"b8719596-b602-47b8-bca4-3ab083fa7c75"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

